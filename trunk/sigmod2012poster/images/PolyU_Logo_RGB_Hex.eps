%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: PolyU_Logo_RGB.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Vicky
%%CreationDate: 19/02/2010
%%BoundingBox: 0 0 636 143
%%HiResBoundingBox: 0 0 635.5142 142.7286
%%CropBox: 0 0 635.5142 142.7286
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Polyu-RGB</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2010-02-19T12:20:43+08:00</xmp:CreateDate>
         <xmp:ModifyDate>2010-02-19T12:20:44+08:00</xmp:ModifyDate>
         <xmp:MetadataDate>2010-02-19T12:20:44+08:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>60</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAPAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXiP52fnh+hzN5b&#xA;8rzg6tul/qCUItvGOM9DL/Mf2f8AW+zXOfc7vs3s3j9eQenoO/8AY8s0/wDJv80df0j/ABMsDTNM&#xA;PXhFzORdzL1Eih99+o5MCe3bIcBO7tJ9oYMcuD9GzO/yB/NfWpdY/wAIeYrl7hHSQ6fc3LEyxPCp&#xA;Z4XZtyvBWI5brSnTpKEujg9q6GIj4kB730KjpIiujB0cBlZTUEHcEEZa88Q3irsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirxD87vzuGkifyz5ZnB1Ugx6hqE&#xA;Z2th0McZH+7fE/sf632a5z6B3fZvZvH65/T0Hf8AseZaB5Rh8r+XI/P3mywe7WZwug6RIrcJ5mBZ&#xA;Z7tqfDCKclU7v/q9YAVuXZ5c5yz8LGa/nHu8h5/c9j8vf85D+UrryZNq+qstrq9koSfSkPxzSkfA&#xA;bcHqj0/2HfsTYJinT5eycgy8Md4nr+v8bvH/AMpINZ178zLrzHbWhlazF7qlxDGBxMkscnpwrWi1&#xA;eSQKoPavhlcdy7fXmOPAIE86H7U+/Jf86Ljy3cJ5W80u66Sr+lbXMtQ9m4NDHIDv6Vf+A+XQwnWx&#xA;aO0ezhkHiY/q+/8Ab976aR0kRXRg6OAyspqCDuCCMueZIczKoqxCioFTtuTQYq7mnMJyHMgkLXeg&#xA;6mn04q3irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiryL81fz50vyxd&#xA;z6Dplr+k9UVSl25kaKGAsPs8o/jZ6fykU/mrtkJTp2+h7LllHHI8MfveN6H5/wDILa5aXeveS7QQ&#xA;QyiQyWEk6kUPV4JZHjmHcg0r+GViQ7ncZdLl4SIZD8a+/o+i/OvnX8vx+X8mq6rJFqWg6lFxt7da&#xA;FrliNo4xsVdSNzsUIqaUy0kU87ptNm8bhjtMfZ+PtfKvmryrbWdtDruhTNe+WL1isE7AetbzUq1r&#xA;dKPsyr2PRx8S+1JD1WDOSeCe0x9vmPL7n0P/AM49+Y/JU/k/9G6VEthqlkvq6vDIwMkrdDc8zTkh&#xA;/wCE6eBNsCKee7Ww5Rk4pbxPL9X45sA/MO28jfmR5g1D/B8gj802gJVGCpBqyxj4/QNf71KbVpzH&#xA;tuISo8nP0hy6aA8T6D/sff5fcs/Jf857ny5cp5V80O40oP6NtcSgh7NwaenIDv6Vdv8AI+XRhOti&#xA;ntHs4ZB4mP6vv/b976WubW1vLcw3MaT278S0bgMjcSGFQdjuK5c8ywGLS5I9Ga5s7G4s79taeksU&#xA;E0U31KW99Zgwj9OQwmHqtaduuFCpqy64uoXQVr9nN/FxkhS/FsIDalWIjjk+wJj8XBq13GKo7XrS&#xA;S6tvK3p207zW93G5mnt3uJIo1gdC83KrAmQoTyatdz0xSgo7HVYNc1WVbeYxzX1o19cwQNA09qsL&#xA;LJ6RX4m4zcS3E1YVpWuKEW1jrT3n+h3N7axfXGbS2lE7oIhb/vEuIz/ulp9kElGArxIFMUtQQ6yJ&#xA;kfUbe8SykF0ZLZJ7ibjdck9Orxl5fRKq3p8RRevENTFVHzHaatf+WtBEdk8OqJcxSATK98bYhHAe&#xA;Z+ILcSV5Ejr40xVWsY7hY9OjbS7jT7SOWddatoRIWe4KgRzGSP47iNiGqwqalS3TFVJLPzSLu2kt&#xA;J7pJYVvHgguTM0E1v66m3huGPJUkMZfi/wBsfDy8MVU7WDWo7OV7+21CUGz5afbC4ueaz+rI0kcs&#xA;0ZkkElDGEdqrTpTeqrOLQym0hMq8JTGpkQsWo1BUciFJ370GBVXFXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXx7+Tum6P5j/M+JPNHG4MxnuDBcfZnu68uEgb7W5ZuJ6kUPhlEdzu9h2hOWPB+78vgHsP5&#xA;8+S/y7i8ny6lcxwaRqluOOmy2sSI88gHw25jTjzUjv8AsdelQZzAp0/ZeozHJwi5R6308/xzfO/l&#xA;jy7qXmKc2yzi20qwVri/vpyfq1pE1A8jf5TcQFUbuaDKgLehzZo4xdXI8h1L6y8neTfy9j/L1NM0&#xA;1YdQ8u38JkuruSn+kEj4pZG+EqylfYpTtTLwBTyeo1GbxuKW0x9n4+181ebde8u6LFfeWfI7yPps&#xA;8jLqWtSEGe7QNVYEZQvG3T2/vDudqZST0D0uDFOdTy8+g7vP3/c9D/5xk8v+TbmW61WaZbnzPaMf&#xA;Rs5QB6EJ29aIGvMtWhb9np3qZ4wHX9s5cgqI2gevf5IH/nKLR/L1nrml31mqRaxfpK2oxptzRCgi&#xA;lcDox+Ja96e2DIGfYuSZiQfpHJ7X+V8tze/lpoDXTuZZLCNGkqQ/ELxVuXWvEDfLI8nSa4AZpAd7&#xA;HNN1zWv0dp09pqU93qz6jLDcWTkSo1mkzozSCh9IKifb2+nJuIyqw1nzFq2jHWtNS2WCUPJY2MyS&#xA;GWWNCQvOVZFVGkpUfA3H3wJUNK833uranows1hTTdVs5btxIrmZDAyo8YYMFPxP1p2wqvv8AzPqm&#xA;lazNY6lCjQXUZOhz28TsZZgafV5AX2k3FNwCKmowKt1jU/OGkaJcapdSWDNCsR+rRwzEcnZUceoZ&#xA;V2Bbb4d6dq7Kr9c1jzDootZbq6sWtrq9htTKYZIhHHIp5O3KZhVWXx6Yq3J5pufTs4bR7a/u9Vu5&#xA;bfTZ4uSQenACZpJAWcn0yjj4W+LahFcVVtavfNGl6be33OzuYrWzmueXoyR0khAfgV9Z6h1Dbg/C&#xA;adcVS7U/O72/lu2vbS+0641RzAJrUNyB9d1QhEWTnVOdTXwPTCqJufNl3pWvGy1iOP8ARbiJU1SJ&#xA;WRIppa8UnDM/FW47P08cCqWv+ZPMGm2l/cwm0lFrfQWcaNFIOSzpE3IkS9VM/wCHvhVHWOsatqt7&#xA;fQWDW8Nvpkv1Se5mieQy3KoGkCRrJHwReQ3LGv44FQ3m+51m28j395JN9V1O0V5EltWKqeLlUahL&#xA;bMlCVJND8sVV9djuY/K8BhvLiKdXtR9YWQ+ofVmRH5E9dnOKofT/ADVcW+sy6Lq6LCGlMGl6kA3o&#xA;zuqAmJ+TMVl3qKt8XbfFVK78x+YoH0tAbRjqGpT6e59KUcVhkkQOP3p3IhJp74VVbXzRqUY8wW2p&#xA;iCO/0dRLB6Ub8JYpIy0ThS5ZizDjxB67VwKsuPM+qWGp21hq13YWPq6e95NPIjhElR0UxLymXls5&#xA;PjtiqzUfNWq6fqemWd5cWFrFfWks8l1Kr8EkhCmg5SR1VuW3fFVk3ne/j0XRL27ii0k6o0iXF1dJ&#xA;JJBAVDemWUNC1JiAV5MKDrhVVl1zzUdZstIhk09prvT3uzcBJmiEiEJ8NJN0LMCPb78Cq8Oo+abn&#xA;V9U0qG4sVl0+K3kWZraUCQ3IkNKeueHH0+vxdemKqM3mjXLLUbzR72CJtTlUNoLQxyejcg7Nzq7c&#xA;TGd3Fdl33xVlNsLgQRi5ZGuOI9VowVTl34hixp9OKvm388vyhvtG1G485eXQ5sJJTc30MVRJaTFu&#xA;RmTjv6Zbfb7B9ulM49XpezNeJgY58+nmlVpdw/nBFpularqQ0/znp4EFtczljbXtsWq/wDZLhR8X&#xA;w/b/AOIv1NsonSXKIvGfmD+r7nrfmH8jtAf8uf8ADOlXDWEts31sXrsQs9wikFrsDZlI6fydvAzM&#xA;NqdTi7Sn43HIXe1dw8vxu+evKXnWfQ4dR8s6pJLc+V9UrBqUFrL8SEED6xbODx5DiKj7Mi7HbKga&#xA;2egz6YTInHaceV/cfxs9q/Kj8jfJ6aVNq+o3Fv5ki1JJI7GRARCls1V5BTRlmI+13Q7DffLIwDpd&#xA;d2nk4uGIMK5+/wDV97z/AM2/kj5r8t+ZqeUr1bsn97ZpFdR2+oRRuSo5Izxse68k6+3TImBB2dhg&#xA;7Sx5IfvBXftYRHlP8gvPXmPWRfebpHtLIOPrc0063F3Nx2KLxaTidqVc7eBxECebHP2pixxrHufd&#xA;QfRN7r3lPy7BBptzqlhpBjhVbO3up4oaRIOCcUd0JVeNNstsB52OLJkuQBl8LY95V8yeRtE0ySwn&#xA;846NeK00systzbxU9Zy7KQZ5a7ttjxBl+UzfzJfIofTfMPlPSbCTS9M87aLHp/JzaGW5gea3SQli&#xA;isJ1V+JJ4Fht35Y8QX8pm/mS+RU7XU/Imn3+mTaZ5y0SC00u0ezhtpZ4JGYSlWd2kW5j+IsgP2fH&#xA;HiC/lM38yXyKpqnmDyvqE2lTy+etDEum3TXZPqW/FyeSqgAuRxVUam5JJ39seIL+UzfzJfIozzV5&#xA;p8j63o0umwecNHtPWZDJM9zbzfCjB6BRPHQ8lG9fox4gv5TN/Ml8ip655o8napHpgHnPRIJLC5iv&#xA;JG9eB1kkiB2C/WFKKS3iT748QX8pm/mS+RUNQ1zyXfPFO3nXRre8s5/rGmy281qiRMwYSh0adjJ6&#xA;3M8/iHtQ1JeIL+UzfzJfIr9U81eXNU0+6tJ/O+hQLdWstqyxzQslZqK0hrcgkhKhRXatTXHiC/lM&#xA;38yXyKzVdf8AKF/5Zt9F/wAbaJFLEYPVuvWgYOLd1dOMf1kcatGtfiPf6HiC/lM38yXyKLTzV5Fl&#xA;ub5tR816Fd2l9EkUtr68CCiAg1LXElQeXhjxBfymb+ZL5FInbyMmh3Gj2nnrSkt5b5LyKS4uYLh0&#xA;jiWP04a/WI6hTF1/l298eIL+UzfzJfIpra+ZPJ+n6ld3un+ctFWPUWWW9tJbmAx/WAoVpois4ZOf&#xA;H4lPL548QX8pm/mS+RRV35p8gahoFzpOp+b9KuDdpIk1wl5bR09Riw4L6j0CVAWpPTeuPEF/KZv5&#xA;kvkUFF5m8tS2Npp2oed9EmtLZ4WkkjuIEmmFu6uisTOyrVkHMgb9qY8QX8pm/mS+RVm1/wDLu7s9&#xA;QstX806JeWt/KZgiXMERjJCgUYzyfEvGoYU3x4gv5TN/Ml8iliXvk+Oz0W2Tz5pDto93Ld+tPcQS&#xA;vM0kjsoci4jpRZSCe539seIL+UzfzJfIplqutflvf+YLDVz5r0qM2qmO5hF7bUnRXEsKv+8/3XKo&#xA;cY8QX8pm/mS+RXXfmbyZN5iTWIvOOiIiWj2RtpJ4JKpI6yMSwuE7oP2ceIL+UzfzJfIoG51Tybe6&#xA;pZ3moeddCuYLeG4tprTnbqskVyfiQEXPwhUCqux6b1x4gv5TN/Ml8ivsvMHlqysk09fPOh3unRLJ&#xA;DFbXktu5MLU9NZXFx8ZjAoPhFR17UeIL+UzfzJfIqGi3fkfSdR0y5h876M9vpto9mIGnt+TrK/qO&#xA;3MXFF+L7I4mg23648QX8pm/mS+RTTT/NHky18x6lqz+ctFlh1BIY/qouLdGQW/IR/vPrDV/vG5fB&#xA;92PEF/KZv5kvkWtT80eTLzX9L1SLzlosMOm+p/ozXEDtJ6w4SfvBcJx+GnH4TQ+PTHiC/lM38yXy&#xA;Kdf8rE/L/wD6mfSf+k62/wCa8eIL+UzfzJfIp+6JIjI6h0cFWVhUEHYgg4XHBfMv50fkvceW7h/N&#xA;PlZHXSVf1bm2iqHs3BqJIyN/Sr/wHy6UzhW4em7O7RGQeHk+r7/2/ehfzE/M7zbd/lr5Z0q9uON3&#xA;rFvJc6lcRjg01ukzQwI1P5whZ6Urt74ykaZaTRYxnnIDaJoe/qm/lT/nG4ap5DOoX121v5g1CNLn&#xA;TkH9zChXkiTACpMgPxEfZ96GpGPZqz9scOWgPQOaE8q6v5g/J3QNQbXJh+kdRLLpPlgsHAkRuLXs&#xA;rKT6cfw8QFP7z6KgA8LPPjhrJjg5DnL9H45JD5B8g+ZvzU8zXGta1cS/o31eWpak32nbtBAPs140&#xA;Gwog+gERiZFv1WqhpYCMR6ug/Sfxu+rNI0jTdH02303TbdLWxtUCQQIKAAfiSTuSdydzl4DyuTJK&#xA;cjKRslWurhLaB53V3VBUrEjSOe3wogLHFgwy8/MtV1JdLtrMR3rKWK3huI2Q8lCq0UUEzln51UdP&#xA;fDSp7N5niS0guRbsvN3E0FxW1nWKL+8ljinWNpFWoO1Nj4/DgVK7b8wfVu0hk0yZYmlvI3lFRwS0&#xA;uI4A7B1RestXHL4fcmmKonzR5yl0OWSJdPNyUtpbzkZkjUwwcRJSoZuQaQbU6VPbFVPR/O0mpawm&#xA;ni2gVTLNDJJHcNIQYYw/JVMMdVbkB1xVM9R8wmwIM2m3ZiaeO2imU2/F5JXEcdAZg1GZhuQPfFUR&#xA;BqjejPPqFs+lwQsAJLqSDiymnxVjkkC/EabnFUsHnbRTr76cby0Fololx9c+sJT1GkZPT/l+yvL7&#xA;VfbFXa/5vgsfL0Ws6aIb6C4cJDK0oiiHINRmeh6MtCP1Yqklp+aEtxqKWQsIC8l1DapwuuVTKwVn&#xA;FIuig1o1DhpDPcCXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWnRJEZHUOjgqysKgg7EEHFQXz9&#xA;/wA5Dflm1vo2l6voNs36P0mOS2urWOrejC8jSo6jf4FZ2U/yinYZVOL0HZOsuRjM7ySXy3/zkzqu&#xA;k+VodKuNJS81CzhW3tb0ylEKovGMyx8SWKgCtGHL2wDJs3ZuxozycQlQPRJPIPkDzN+afmafW9bu&#xA;Jf0b6vLUdSbZpCP90Qbca022+FB9AIjEyLfqtVDSwEYj1dB+k/jd9WaRpGm6Pptvpum26WtjaoEg&#xA;gQUAA/Eknck7k7nLwHlcmSU5GUjZKLxYKdxCZoHiEjw8xT1IyA4HehINK/7WKvLJdLmi8s6ncx20&#xA;r3ix6hboWiaT1IzcsQXVrWRJGb0UPNpCTT7QwoZHr/l1INP0PSNPgElk9+hlluFkuni4o8oajGoQ&#xA;lOLfEBQ8ehOKWGrocsU0Vrcpeie0nveUcVkXkmeS4Bhev1NoXjZAWYNIw8KUpihlfmvyrNf6vJcS&#xA;Wlqlj9UNl65hkuZ5mlKHkEgUNE0Yi4q+9AemKVHy5p09t5h+tTR3aJ9fuRGHiv5AyzQqqyF5D6ar&#xA;VSCzip8dsUJ15kvJr21tYoLG7Z4b+znkHotskFykkhr0NFU9OuBKZjzBABO81rdwRQKpEskLASFz&#xA;QJGoq7NXtx77YqkUmleYFln80wxf7mWZfT0tmG9igp9VZtwJGqZKg0D7dMKojVLD/E2n2GopazxP&#xA;CHeO1uXNrJE5K/Hw9G4rIOFF9iaYFYhpPk/U9WkuZ0s44dOin9FLSWaa2aUwuGLlxbCSgLMooqmv&#xA;LCh6uqhVCjoBQV36e5wJbxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVpuPE8qcafFXpT3xV5X&#xA;qP8A0Ll+lJPrf6E+uc/3vHjw5135en+769fxyHpdrD85w7cdPS9L/Rf6Ot/0V6H6O4D6r9V4ehw7&#xA;en6fwcflkw62fFZ4rvzRWLB2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:F87F1174072068118DBB85E48057F60B</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:F87F1174072068118DBB85E48057F60B</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:764D6537DC8CDE11BA74CEE70C8B13E3</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:51093c91-3e6f-4743-8f9e-97a1ef74ffcf</stRef:instanceID>
            <stRef:documentID>xmp.did:FC7F11740720681197A5CBDAC87D6634</stRef:documentID>
            <stRef:originalDocumentID>uuid:764D6537DC8CDE11BA74CEE70C8B13E3</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0180117407206811994C98BEC1CA511E</stEvt:instanceID>
                  <stEvt:when>2009-12-03T09:29:41+08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FA7F117407206811994CF69335A20D81</stEvt:instanceID>
                  <stEvt:when>2010-01-22T10:18:57+08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FC7F11740720681197A5CBDAC87D6634</stEvt:instanceID>
                  <stEvt:when>2010-02-11T14:29:44+08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F87F1174072068118DBB85E48057F60B</stEvt:instanceID>
                  <stEvt:when>2010-02-19T12:20:44+08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>297.038889</stDim:w>
            <stDim:h>209.902778</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=160 G=35 B=55 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>160</xmpG:red>
                           <xmpG:green>35</xmpG:green>
                           <xmpG:blue>55</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -142.729 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 142.729 li
635.514 142.729 li
635.514 0 li
cp
clp
[1 0 0 1 0 0 ]ct
635.514 99.061 mo
147.125 99.061 li
147.125 97.0557 li
635.514 97.0557 li
635.514 99.061 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.251896 .979034 .760555 .191073 cmyk
ef
17.6729 43.897 mo
23.1626 42.7227 28.9126 43.2056 34.1675 45.3506 cv
63.8008 15.7188 li
67.9224 11.5972 74.7598 11.7417 78.8823 15.8638 cv
83.0049 19.9858 83.0024 26.8789 78.8809 31.0015 cv
71.2798 38.6025 li
59.8828 27.2061 li
50.8511 36.2373 li
82.7925 68.1792 li
91.8247 59.1475 li
80.4351 47.7583 li
87.9541 40.2388 li
88.0005 40.1968 li
97.189 31.0068 97.188 16.1084 87.998 6.91895 cv
78.8081 -2.27051 63.8804 -2.32471 54.6919 6.86475 cv
54.6919 6.86475 17.6411 43.9126 17.6729 43.897 cv
cp
98.8115 17.7461 mo
99.9858 23.2354 99.5024 28.9854 97.3579 34.2402 cv
126.989 63.874 li
131.111 67.9956 130.967 74.833 126.844 78.9551 cv
122.722 83.0776 115.829 83.0757 111.707 78.9541 cv
104.105 71.3525 li
115.502 59.9556 li
106.471 50.9238 li
74.5293 82.8657 li
83.5605 91.8975 li
94.9502 80.5078 li
102.469 88.0269 li
102.512 88.0732 li
111.701 97.2622 126.6 97.2612 135.789 88.0708 cv
144.979 78.8809 145.033 63.9531 135.843 54.7646 cv
135.843 54.7646 98.7959 17.7139 98.8115 17.7461 cv
cp
125.015 98.8315 mo
119.526 100.006 113.776 99.5225 108.521 97.3774 cv
78.8877 127.009 li
74.7656 131.132 67.9287 130.986 63.8062 126.864 cv
59.6836 122.742 59.6855 115.849 63.8071 111.727 cv
71.4092 104.125 li
82.8057 115.522 li
91.8374 106.491 li
59.8955 74.5493 li
50.8638 83.5811 li
62.2534 94.9702 li
54.7344 102.489 li
54.688 102.532 li
45.4995 111.721 45.5005 126.62 54.6899 135.81 cv
63.8804 144.999 78.8081 145.054 87.9971 135.863 cv
87.9971 135.863 125.047 98.8154 125.015 98.8315 cv
cp
43.897 125.003 mo
42.7227 119.513 43.2061 113.763 45.3511 108.508 cv
15.7192 78.875 li
11.5972 74.7529 11.7422 67.916 15.8643 63.7935 cv
19.9858 59.6709 26.8794 59.6729 31.0015 63.7949 cv
38.6025 71.396 li
27.2061 82.793 li
36.2378 91.8247 li
68.1797 59.8828 li
59.1475 50.8516 li
47.7588 62.2407 li
40.2393 54.7217 li
40.1968 54.6753 li
31.0068 45.4863 16.1089 45.4873 6.91895 54.6777 cv
-2.27002 63.8677 -2.32422 78.7954 6.86523 87.9839 cv
6.86523 87.9839 43.9131 125.034 43.897 125.003 cv
cp
ef
357.949 43.1011 mo
356.157 42.4927 354.322 42.0415 352.4 42.0415 cv
347.889 42.0415 344.37 45.0835 344.37 49.2051 cv
344.37 52.0117 346.593 56.3291 352.66 56.3291 cv
354.538 56.3291 356.524 55.7798 358.272 55.2104 cv
358.272 54.877 li
357.949 54.5825 li
357.949 52.0117 li
357.949 50.5786 358.769 50.5786 359.482 50.5786 cv
359.482 50.0684 li
358.834 50.0884 357.841 50.1079 356.848 50.1079 cv
355.876 50.1079 354.883 50.0884 353.869 50.0684 cv
353.869 50.5786 li
355.013 50.5786 355.833 50.5786 355.833 52.0117 cv
355.833 54.9355 li
355.509 55.1519 354.625 55.7012 352.919 55.7012 cv
349.033 55.7012 346.745 52.3057 346.745 48.9106 cv
346.745 45.7114 348.946 42.6694 352.768 42.6694 cv
355.186 42.6694 357.28 43.5723 357.841 45.8486 cv
358.316 45.8486 li
357.949 43.1011 li
cp
340.766 44.8677 mo
340.766 42.9443 341.478 42.8462 342.795 42.8462 cv
342.795 42.3359 li
341.953 42.3359 341.133 42.375 340.291 42.375 cv
339.298 42.375 338.283 42.3555 337.29 42.3359 cv
337.29 42.8462 li
339.449 42.8657 339.902 43.415 339.902 45.2207 cv
339.902 53.0322 li
338.434 51.5796 336.405 49.6367 334.57 47.792 cv
332.109 45.3188 330.101 43.5332 329.216 42.3359 cv
328.633 42.3359 328.028 42.375 327.446 42.375 cv
326.776 42.375 326.128 42.3555 325.459 42.3359 cv
325.459 42.8462 li
327.316 42.8462 328.115 43.4546 328.115 45.1426 cv
328.115 53.0322 li
328.115 55.5244 327.122 55.5244 325.805 55.5244 cv
325.805 56.0347 li
326.755 56.0151 327.726 55.9956 328.676 55.9956 cv
329.626 55.9956 330.598 56.0347 331.547 56.0347 cv
331.547 55.5244 li
329.216 55.5244 328.979 54.9751 328.979 52.2666 cv
328.979 44.9463 li
340.269 56.2114 li
340.766 56.2114 li
340.766 44.8677 li
cp
310.781 48.6948 mo
310.781 45.1426 312.767 42.6694 315.918 42.6694 cv
319.61 42.6694 321.51 46.6929 321.51 49.6758 cv
321.51 53.2285 319.524 55.7012 316.372 55.7012 cv
312.68 55.7012 310.781 51.6777 310.781 48.6948 cv
cp
308.406 49.2637 mo
308.406 52.9927 311.795 56.3291 316.113 56.3291 cv
320.841 56.3291 323.885 52.6982 323.885 49.1069 cv
323.885 45.3779 320.496 42.0415 316.178 42.0415 cv
311.45 42.0415 308.406 45.6724 308.406 49.2637 cv
cp
289.264 56.0347 mo
290.549 56.0117 291.757 55.9883 292.991 55.9883 cv
294.121 55.9883 295.226 56.0347 296.177 56.0347 cv
296.177 55.4272 li
295.098 55.4043 294.121 55.3809 294.121 53.7451 cv
294.121 42.0171 li
294.121 40.3813 295.098 40.3584 296.074 40.335 cv
296.074 39.7275 li
295.175 39.751 293.993 39.7744 292.811 39.7744 cv
291.654 39.7744 290.472 39.751 289.264 39.7275 cv
289.264 40.335 li
290.626 40.3584 291.603 40.3813 291.603 42.0171 cv
291.603 53.7451 li
291.603 55.3809 290.626 55.4043 289.264 55.4272 cv
289.264 56.0347 li
cp
294.224 47.9277 mo
296.896 50.6382 299.672 53.2314 302.216 56.0347 cv
302.833 56.0117 303.45 55.9883 304.067 55.9883 cv
304.889 55.9883 305.737 56.0117 306.56 56.0347 cv
306.56 55.4272 li
306.02 55.4272 305.197 55.4272 304.35 54.6797 cv
301.677 52.1567 299.158 49.5166 296.563 46.9233 cv
300.957 42.7412 li
303.27 40.5449 304.118 40.335 305.557 40.335 cv
305.557 39.7275 li
304.735 39.751 303.938 39.7744 303.09 39.7744 cv
302.011 39.7744 300.88 39.751 299.775 39.7275 cv
299.775 40.335 li
300.469 40.335 301.214 40.335 301.214 40.8721 cv
301.214 41.293 300.546 41.9004 300.263 42.1572 cv
294.224 47.9277 li
cp
280.632 43.1011 mo
278.84 42.4927 277.005 42.0415 275.084 42.0415 cv
270.572 42.0415 267.053 45.0835 267.053 49.2051 cv
267.053 52.0117 269.276 56.3291 275.343 56.3291 cv
277.221 56.3291 279.208 55.7798 280.956 55.2104 cv
280.956 54.877 li
280.632 54.5825 li
280.632 52.0117 li
280.632 50.5786 281.453 50.5786 282.165 50.5786 cv
282.165 50.0684 li
281.517 50.0884 280.524 50.1079 279.531 50.1079 cv
278.56 50.1079 277.566 50.0884 276.552 50.0684 cv
276.552 50.5786 li
277.696 50.5786 278.517 50.5786 278.517 52.0117 cv
278.517 54.9355 li
278.193 55.1519 277.308 55.7012 275.602 55.7012 cv
271.716 55.7012 269.428 52.3057 269.428 48.9106 cv
269.428 45.7114 271.63 42.6694 275.451 42.6694 cv
277.869 42.6694 279.963 43.5723 280.524 45.8486 cv
280.999 45.8486 li
280.632 43.1011 li
cp
263.449 44.8677 mo
263.449 42.9443 264.162 42.8462 265.478 42.8462 cv
265.478 42.3359 li
264.636 42.3359 263.816 42.375 262.974 42.375 cv
261.981 42.375 260.966 42.3555 259.973 42.3359 cv
259.973 42.8462 li
262.132 42.8657 262.585 43.415 262.585 45.2207 cv
262.585 53.0322 li
261.118 51.5796 259.088 49.6367 257.253 47.792 cv
254.792 45.3188 252.784 43.5332 251.899 42.3359 cv
251.316 42.3359 250.712 42.375 250.129 42.375 cv
249.459 42.375 248.812 42.3555 248.143 42.3359 cv
248.143 42.8462 li
250 42.8462 250.798 43.4546 250.798 45.1426 cv
250.798 53.0322 li
250.798 55.5244 249.805 55.5244 248.488 55.5244 cv
248.488 56.0347 li
249.438 56.0151 250.41 55.9956 251.359 55.9956 cv
252.31 55.9956 253.281 56.0347 254.231 56.0347 cv
254.231 55.5244 li
251.899 55.5244 251.662 54.9751 251.662 52.2666 cv
251.662 44.9463 li
262.953 56.2114 li
263.449 56.2114 li
263.449 44.8677 li
cp
233.464 48.6948 mo
233.464 45.1426 235.45 42.6694 238.602 42.6694 cv
242.293 42.6694 244.193 46.6929 244.193 49.6758 cv
244.193 53.2285 242.207 55.7012 239.055 55.7012 cv
235.364 55.7012 233.464 51.6777 233.464 48.6948 cv
cp
231.089 49.2637 mo
231.089 52.9927 234.479 56.3291 238.796 56.3291 cv
243.524 56.3291 246.568 52.6982 246.568 49.1069 cv
246.568 45.3779 243.179 42.0415 238.861 42.0415 cv
234.133 42.0415 231.089 45.6724 231.089 49.2637 cv
cp
213.924 47.1104 mo
213.924 42.0171 li
213.924 40.3813 214.9 40.3584 216.263 40.335 cv
216.263 39.7275 li
214.978 39.751 213.795 39.7744 212.613 39.7744 cv
211.457 39.7744 210.274 39.751 209.067 39.7275 cv
209.067 40.335 li
210.429 40.3584 211.405 40.3813 211.405 42.0171 cv
211.405 53.7451 li
211.405 55.3809 210.429 55.4043 209.067 55.4272 cv
209.067 56.0347 li
210.352 56.0117 211.56 55.9883 212.793 55.9883 cv
213.924 55.9883 215.029 56.0347 216.263 56.0347 cv
216.263 55.4272 li
214.9 55.4043 213.924 55.3809 213.924 53.7451 cv
213.924 48.0679 li
224.306 48.0679 li
224.306 53.7451 li
224.306 55.3809 223.33 55.4043 221.968 55.4272 cv
221.968 56.0347 li
223.304 56.0117 224.486 55.9883 225.694 55.9883 cv
226.851 55.9883 228.007 56.0117 229.164 56.0347 cv
229.164 55.4272 li
227.801 55.4043 226.825 55.3809 226.825 53.7451 cv
226.825 42.0171 li
226.825 40.3813 227.801 40.3584 229.164 40.335 cv
229.164 39.7275 li
228.007 39.7275 226.876 39.7744 225.771 39.7744 cv
224.538 39.7744 223.33 39.751 221.968 39.7275 cv
221.968 40.335 li
223.33 40.3584 224.306 40.3813 224.306 42.0171 cv
224.306 47.1104 li
213.924 47.1104 li
cp
194.067 42.9639 mo
196.593 42.9639 li
198.751 42.9639 199.723 43.5132 200.047 45.3584 cv
200.479 45.2603 li
200.479 42.3359 li
198.384 42.375 196.333 42.375 194.261 42.375 cv
192.814 42.375 191.347 42.375 189.9 42.3359 cv
189.9 42.8462 li
191.606 42.9048 191.951 42.9834 191.951 44.5928 cv
191.951 53.3066 li
191.951 55.2104 191.778 55.5244 189.9 55.5244 cv
189.9 56.0347 li
191.498 55.9956 193.095 55.9956 194.693 55.9956 cv
196.852 55.9956 199.011 56.0347 201.169 56.0347 cv
201.385 55.0142 201.709 54.0132 202.055 53.0322 cv
201.537 52.9536 li
200.694 55.0537 199.745 55.3086 197.629 55.4067 cv
196.291 55.4067 li
194.153 55.4067 194.067 54.8574 194.067 52.6787 cv
194.067 49.3423 li
196.377 49.3423 li
198.039 49.3423 198.73 49.3423 198.73 51.2266 cv
199.162 51.2266 li
199.183 50.5986 199.075 49.6758 199.075 49.0479 cv
199.075 48.3413 199.119 47.2817 199.162 46.8496 cv
198.73 46.8496 li
198.665 47.3013 198.665 48.5376 196.917 48.5376 cv
194.067 48.5376 li
194.067 42.9639 li
cp
175.843 48.5376 mo
175.843 44.2593 li
175.843 42.8853 176.663 42.8657 177.807 42.8462 cv
177.807 42.3359 li
176.728 42.3555 175.735 42.375 174.742 42.375 cv
173.77 42.375 172.777 42.3555 171.762 42.3359 cv
171.762 42.8462 li
172.907 42.8657 173.727 42.8853 173.727 44.2593 cv
173.727 54.1113 li
173.727 55.4854 172.907 55.5049 171.762 55.5244 cv
171.762 56.0347 li
172.842 56.0151 173.856 55.9956 174.893 55.9956 cv
175.843 55.9956 176.771 56.0347 177.807 56.0347 cv
177.807 55.5244 li
176.663 55.5049 175.843 55.4854 175.843 54.1113 cv
175.843 49.3423 li
184.564 49.3423 li
184.564 54.1113 li
184.564 55.4854 183.744 55.5049 182.6 55.5244 cv
182.6 56.0347 li
183.723 56.0151 184.715 55.9956 185.73 55.9956 cv
186.702 55.9956 187.673 56.0151 188.645 56.0347 cv
188.645 55.5244 li
187.5 55.5049 186.68 55.4854 186.68 54.1113 cv
186.68 44.2593 li
186.68 42.8853 187.5 42.8657 188.645 42.8462 cv
188.645 42.3359 li
187.673 42.3359 186.723 42.375 185.795 42.375 cv
184.759 42.375 183.744 42.3555 182.6 42.3359 cv
182.6 42.8462 li
183.744 42.8657 184.564 42.8853 184.564 44.2593 cv
184.564 48.5376 li
175.843 48.5376 li
cp
170.791 39.0732 mo
170.251 39.0732 li
170.149 39.5171 169.506 39.7275 168.581 39.7275 cv
156.914 39.7275 li
156.271 39.7275 155.577 39.7041 155.294 39.0732 cv
154.781 39.0732 li
154.498 42.7881 li
155.166 42.7881 li
155.603 41.2695 155.706 40.6851 158.019 40.6851 cv
161.385 40.6851 li
161.385 53.7451 li
161.385 55.3809 160.409 55.4043 159.047 55.4272 cv
159.047 56.0347 li
160.332 56.0117 161.54 55.9883 162.773 55.9883 cv
163.904 55.9883 165.009 56.0347 166.243 56.0347 cv
166.243 55.4272 li
164.88 55.4043 163.904 55.3809 163.904 53.7451 cv
163.904 40.6851 li
167.81 40.6851 li
169.866 40.6851 169.789 41.5264 169.866 42.7881 cv
170.56 42.7881 li
170.791 39.0732 li
cp
.522423 .426978 .407874 .0623789 cmyk
ef
609.715 78.3018 mo
616.215 70.3188 li
616.963 69.3906 617.611 68.5552 619.041 68.5244 cv
619.041 67.7197 li
618.087 67.7197 617.168 67.7817 616.25 67.7817 cv
614.956 67.7817 613.629 67.751 612.335 67.7197 cv
612.335 68.5244 li
614.071 68.5244 614.752 68.5244 614.752 69.4219 cv
614.752 70.1333 613.833 71.1235 613.424 71.6494 cv
608.966 77.188 li
604.202 71.0923 li
603.555 70.2568 603.078 69.5454 603.078 69.1738 cv
603.078 68.5244 604.44 68.5244 604.984 68.5244 cv
604.984 67.7197 li
603.588 67.7197 602.227 67.7817 600.832 67.7817 cv
599.266 67.7817 596.748 67.751 596.101 67.7197 cv
596.101 68.5244 li
598.109 68.6792 598.28 68.6172 599.266 69.8857 cv
606.379 78.7969 li
606.379 86.2842 li
606.379 88.4502 605.086 88.481 603.283 88.5122 cv
603.283 89.3164 li
604.882 89.2856 606.448 89.2549 607.979 89.2549 cv
609.544 89.2549 611.11 89.2856 612.812 89.3164 cv
612.812 88.5122 li
611.008 88.481 609.715 88.4502 609.715 86.2842 cv
609.715 78.3018 li
cp
594.744 66.8535 mo
594.029 66.8535 li
593.893 67.4414 593.042 67.7197 591.817 67.7197 cv
576.365 67.7197 li
575.514 67.7197 574.595 67.689 574.221 66.8535 cv
573.541 66.8535 li
573.166 71.7729 li
574.051 71.7729 li
574.629 69.7617 574.765 68.9883 577.829 68.9883 cv
582.287 68.9883 li
582.287 86.2842 li
582.287 88.4502 580.994 88.481 579.19 88.5122 cv
579.19 89.3164 li
580.891 89.2856 582.491 89.2549 584.125 89.2549 cv
585.622 89.2549 587.086 89.3164 588.719 89.3164 cv
588.719 88.5122 li
586.916 88.481 585.622 88.4502 585.622 86.2842 cv
585.622 68.9883 li
590.795 68.9883 li
593.518 68.9883 593.416 70.1021 593.518 71.7729 cv
594.437 71.7729 li
594.744 66.8535 li
cp
565.309 86.2842 mo
565.309 88.4502 564.015 88.481 562.211 88.5122 cv
562.211 89.3164 li
563.914 89.2856 565.513 89.2549 567.147 89.2549 cv
568.645 89.2549 570.108 89.3164 571.742 89.3164 cv
571.742 88.5122 li
569.938 88.481 568.645 88.4502 568.645 86.2842 cv
568.645 70.752 li
568.645 68.5859 569.938 68.5552 571.742 68.5244 cv
571.742 67.7197 li
570.041 67.751 568.474 67.7817 566.909 67.7817 cv
565.377 67.7817 563.811 67.751 562.211 67.7197 cv
562.211 68.5244 li
564.015 68.5552 565.309 68.5859 565.309 70.752 cv
565.309 86.2842 li
cp
547.172 88.7285 mo
548.772 89.4092 550.61 89.7808 552.379 89.7808 cv
556.396 89.7808 560.378 87.522 560.378 83.4995 cv
560.378 76.3833 549.895 77.9614 549.895 72.2061 cv
549.895 69.9478 551.393 68.2461 553.979 68.2461 cv
556.43 68.2461 557.996 69.5146 558.37 71.6802 cv
559.153 71.6802 li
558.608 67.7197 li
557.247 67.5342 555.852 67.2559 554.456 67.2559 cv
550.303 67.2559 547.172 69.3286 547.172 73.3203 cv
547.172 80.6221 557.247 78.9204 557.247 84.6753 cv
557.247 87.1196 555.206 88.7905 552.584 88.7905 cv
549.759 88.7905 547.853 86.5317 547.275 84.2114 cv
546.493 84.2114 li
547.172 88.7285 li
cp
537.182 73.3818 mo
537.182 75.6099 535.548 78.1162 531.362 78.1162 cv
530.784 78.1162 530.069 78.0542 529.559 77.9614 cv
529.559 68.8955 li
530.171 68.8027 530.75 68.71 531.6 68.71 cv
535.617 68.71 537.182 70.6899 537.182 73.3818 cv
cp
532.656 79.106 mo
535.106 82.6025 537.386 86.2227 540.483 89.3164 cv
541.436 89.2856 542.423 89.2549 543.376 89.2549 cv
544.228 89.2549 545.078 89.3164 545.929 89.3164 cv
545.929 88.5122 li
544.194 88.5122 543.172 87.6768 542.083 86.563 cv
540.62 85.0776 538.986 82.6025 535.889 78.4873 cv
538.543 77.7759 540.721 75.8262 540.721 73.1963 cv
540.721 70.9995 539.292 67.7197 532.86 67.7197 cv
530.682 67.7197 529.491 67.7817 528.299 67.7817 cv
526.631 67.7817 524.999 67.751 523.125 67.7197 cv
523.125 68.5244 li
524.93 68.5552 526.223 68.5859 526.223 70.752 cv
526.223 86.439 li
526.223 88.2026 524.828 88.605 523.125 88.5122 cv
523.125 89.3164 li
524.828 89.2856 526.427 89.2549 528.061 89.2549 cv
529.559 89.2549 531.022 89.3164 532.656 89.3164 cv
532.656 88.5122 li
530.852 88.481 529.559 88.4502 529.559 86.2842 cv
529.559 79.106 li
532.656 79.106 li
cp
508.765 68.71 mo
512.748 68.71 li
516.151 68.71 517.682 69.5762 518.193 72.4849 cv
518.874 72.3301 li
518.874 67.7197 li
515.573 67.7817 512.338 67.7817 509.072 67.7817 cv
506.792 67.7817 504.477 67.7817 502.197 67.7197 cv
502.197 68.5244 li
504.885 68.6172 505.43 68.7412 505.43 71.2783 cv
505.43 85.0156 li
505.43 88.0171 505.158 88.5122 502.197 88.5122 cv
502.197 89.3164 li
504.715 89.2549 507.234 89.2549 509.752 89.2549 cv
513.156 89.2549 516.559 89.3164 519.963 89.3164 cv
520.303 87.7075 520.813 86.1299 521.358 84.5825 cv
520.542 84.459 li
519.213 87.7695 517.716 88.1719 514.381 88.3267 cv
512.271 88.3267 li
508.901 88.3267 508.765 87.46 508.765 84.0259 cv
508.765 78.7656 li
512.408 78.7656 li
515.028 78.7656 516.117 78.7656 516.117 81.7358 cv
516.797 81.7358 li
516.832 80.7461 516.662 79.292 516.662 78.3018 cv
516.662 77.188 516.729 75.5171 516.797 74.8364 cv
516.117 74.8364 li
516.014 75.5479 516.014 77.4971 513.257 77.4971 cv
508.765 77.4971 li
508.765 68.71 li
cp
488.548 89.7808 mo
489.807 89.7808 li
496.036 75.5791 li
496.104 75.4243 498.418 70.0713 498.623 69.731 cv
499.099 68.9883 499.746 68.5244 500.903 68.5244 cv
500.903 67.7197 li
499.848 67.751 498.792 67.7817 497.737 67.7817 cv
496.411 67.7817 495.049 67.751 493.721 67.7197 cv
493.721 68.5244 li
494.947 68.5859 496.308 68.4932 496.308 69.9478 cv
496.308 70.9688 495.593 72.4849 495.253 73.4746 cv
494.538 75.4858 493.585 77.4663 492.768 79.4775 cv
490.182 85.6035 li
485.655 75.022 li
485.281 74.1245 483.477 70.3809 483.477 69.3599 cv
483.477 68.8955 483.885 68.6479 484.362 68.6172 cv
484.838 68.5552 485.315 68.5552 485.825 68.5244 cv
485.825 67.7197 li
484.396 67.7197 482.932 67.7817 481.503 67.7817 cv
479.903 67.7817 478.303 67.751 476.704 67.7197 cv
476.704 68.5244 li
478.951 68.5244 479.495 69.1123 480.278 70.9688 cv
481.061 72.98 482.047 74.9912 482.899 76.9712 cv
488.548 89.7808 li
cp
469.188 86.2842 mo
469.188 88.4502 467.895 88.481 466.09 88.5122 cv
466.09 89.3164 li
467.792 89.2856 469.392 89.2549 471.026 89.2549 cv
472.524 89.2549 473.987 89.3164 475.621 89.3164 cv
475.621 88.5122 li
473.817 88.481 472.524 88.4502 472.524 86.2842 cv
472.524 70.752 li
472.524 68.5859 473.817 68.5552 475.621 68.5244 cv
475.621 67.7197 li
473.918 67.751 472.353 67.7817 470.788 67.7817 cv
469.256 67.7817 467.691 67.751 466.09 67.7197 cv
466.09 68.5244 li
467.895 68.5552 469.188 68.5859 469.188 70.752 cv
469.188 86.2842 li
cp
461.5 71.7114 mo
461.5 68.6792 462.623 68.5244 464.699 68.5244 cv
464.699 67.7197 li
463.372 67.7197 462.078 67.7817 460.75 67.7817 cv
459.185 67.7817 457.585 67.751 456.02 67.7197 cv
456.02 68.5244 li
459.423 68.5552 460.137 69.4219 460.137 72.2681 cv
460.137 84.5825 li
457.824 82.293 454.625 79.23 451.731 76.3213 cv
447.852 72.4229 444.686 69.6074 443.291 67.7197 cv
442.372 67.7197 441.419 67.7817 440.5 67.7817 cv
439.445 67.7817 438.424 67.751 437.37 67.7197 cv
437.37 68.5244 li
440.295 68.5244 441.555 69.4834 441.555 72.1445 cv
441.555 84.5825 li
441.555 88.5122 439.99 88.5122 437.914 88.5122 cv
437.914 89.3164 li
439.412 89.2856 440.942 89.2549 442.44 89.2549 cv
443.937 89.2549 445.469 89.3164 446.966 89.3164 cv
446.966 88.5122 li
443.291 88.5122 442.917 87.6455 442.917 83.376 cv
442.917 71.835 li
460.716 89.5952 li
461.5 89.5952 li
461.5 71.7114 li
cp
438.212 63.6074 mo
436.834 63.6074 435.499 63.6812 434.121 63.6812 cv
432.419 63.6812 430.717 63.6445 429.015 63.6074 cv
429.015 64.5654 li
432.622 64.6758 432.865 64.5654 432.865 70.606 cv
432.865 81.103 li
432.865 83.6445 432.216 88.3589 425.491 88.3589 cv
419.17 88.3589 417.59 84.123 417.59 79.7402 cv
417.59 67.2173 li
417.59 64.6392 419.129 64.6021 421.278 64.5654 cv
421.278 63.6074 li
419.251 63.6445 417.387 63.6812 415.524 63.6812 cv
413.702 63.6812 411.837 63.6445 409.933 63.6074 cv
409.933 64.5654 li
412.081 64.6021 413.62 64.6392 413.62 67.2173 cv
413.62 80.6611 li
413.742 86.9224 417.752 89.8691 424.437 89.8691 cv
431.568 89.8691 435.011 86.1123 435.011 81.103 cv
435.011 70.4951 li
435.011 66.002 434.971 64.5654 438.212 64.5654 cv
438.212 63.6074 li
cp
401.653 68.8955 mo
399.032 68.0601 396.377 67.2559 393.621 67.2559 cv
386.95 67.2559 380.721 71.8042 380.721 78.147 cv
380.721 85.1089 385.758 89.7808 393.723 89.7808 cv
395.969 89.7808 399.815 88.9453 401.245 88.1406 cv
402.027 83.6235 li
401.245 83.438 li
400.563 86.6865 397.772 88.7905 394.403 88.7905 cv
389.162 88.7905 384.261 84.3042 384.261 78.0542 cv
384.261 70.6284 389.945 68.2461 393.858 68.2461 cv
397.67 68.2461 400.495 69.7002 401.142 73.3203 cv
401.993 73.3203 li
401.653 68.8955 li
cp
372.365 86.2842 mo
372.365 88.4502 371.071 88.481 369.268 88.5122 cv
369.268 89.3164 li
370.969 89.2856 372.569 89.2549 374.203 89.2549 cv
375.7 89.2549 377.164 89.3164 378.797 89.3164 cv
378.797 88.5122 li
376.993 88.481 375.7 88.4502 375.7 86.2842 cv
375.7 70.752 li
375.7 68.5859 376.993 68.5552 378.797 68.5244 cv
378.797 67.7197 li
377.095 67.751 375.53 67.7817 373.964 67.7817 cv
372.432 67.7817 370.868 67.751 369.268 67.7197 cv
369.268 68.5244 li
371.071 68.5552 372.365 68.5859 372.365 70.752 cv
372.365 86.2842 li
cp
364.676 71.7114 mo
364.676 68.6792 365.799 68.5244 367.875 68.5244 cv
367.875 67.7197 li
366.548 67.7197 365.254 67.7817 363.927 67.7817 cv
362.362 67.7817 360.762 67.751 359.196 67.7197 cv
359.196 68.5244 li
362.599 68.5552 363.315 69.4219 363.315 72.2681 cv
363.315 84.5825 li
361 82.293 357.801 79.23 354.908 76.3213 cv
351.028 72.4229 347.863 69.6074 346.467 67.7197 cv
345.548 67.7197 344.596 67.7817 343.677 67.7817 cv
342.622 67.7817 341.601 67.751 340.545 67.7197 cv
340.545 68.5244 li
343.473 68.5244 344.732 69.4834 344.732 72.1445 cv
344.732 84.5825 li
344.732 88.5122 343.166 88.5122 341.09 88.5122 cv
341.09 89.3164 li
342.587 89.2856 344.119 89.2549 345.617 89.2549 cv
347.114 89.2549 348.646 89.3164 350.143 89.3164 cv
350.143 88.5122 li
346.467 88.5122 346.093 87.6455 346.093 83.376 cv
346.093 71.835 li
363.893 89.5952 li
364.676 89.5952 li
364.676 71.7114 li
cp
318.963 77.4971 mo
318.963 70.752 li
318.963 68.5859 320.257 68.5552 322.061 68.5244 cv
322.061 67.7197 li
320.359 67.751 318.793 67.7817 317.228 67.7817 cv
315.696 67.7817 314.13 67.751 312.531 67.7197 cv
312.531 68.5244 li
314.334 68.5552 315.628 68.5859 315.628 70.752 cv
315.628 86.2842 li
315.628 88.4502 314.334 88.481 312.531 88.5122 cv
312.531 89.3164 li
314.232 89.2856 315.832 89.2549 317.466 89.2549 cv
318.963 89.2549 320.427 89.3164 322.061 89.3164 cv
322.061 88.5122 li
320.257 88.481 318.963 88.4502 318.963 86.2842 cv
318.963 78.7656 li
332.713 78.7656 li
332.713 86.2842 li
332.713 88.4502 331.42 88.481 329.616 88.5122 cv
329.616 89.3164 li
331.386 89.2856 332.952 89.2549 334.551 89.2549 cv
336.083 89.2549 337.614 89.2856 339.146 89.3164 cv
339.146 88.5122 li
337.342 88.481 336.049 88.4502 336.049 86.2842 cv
336.049 70.752 li
336.049 68.5859 337.342 68.5552 339.146 68.5244 cv
339.146 67.7197 li
337.614 67.7197 336.117 67.7817 334.653 67.7817 cv
333.02 67.7817 331.42 67.751 329.616 67.7197 cv
329.616 68.5244 li
331.42 68.5552 332.713 68.5859 332.713 70.752 cv
332.713 77.4971 li
318.963 77.4971 li
cp
309.977 68.8955 mo
307.356 68.0601 304.701 67.2559 301.945 67.2559 cv
295.274 67.2559 289.045 71.8042 289.045 78.147 cv
289.045 85.1089 294.083 89.7808 302.047 89.7808 cv
304.293 89.7808 308.139 88.9453 309.568 88.1406 cv
310.351 83.6235 li
309.568 83.438 li
308.888 86.6865 306.097 88.7905 302.727 88.7905 cv
297.486 88.7905 292.585 84.3042 292.585 78.0542 cv
292.585 70.6284 298.269 68.2461 302.183 68.2461 cv
305.995 68.2461 308.819 69.7002 309.466 73.3203 cv
310.317 73.3203 li
309.977 68.8955 li
cp
274.556 68.71 mo
278.538 68.71 li
281.941 68.71 283.473 69.5762 283.983 72.4849 cv
284.664 72.3301 li
284.664 67.7197 li
281.362 67.7817 278.129 67.7817 274.862 67.7817 cv
272.582 67.7817 270.267 67.7817 267.987 67.7197 cv
267.987 68.5244 li
270.676 68.6172 271.22 68.7412 271.22 71.2783 cv
271.22 85.0156 li
271.22 88.0171 270.948 88.5122 267.987 88.5122 cv
267.987 89.3164 li
270.505 89.2549 273.024 89.2549 275.542 89.2549 cv
278.946 89.2549 282.35 89.3164 285.753 89.3164 cv
286.093 87.7075 286.604 86.1299 287.148 84.5825 cv
286.332 84.459 li
285.004 87.7695 283.507 88.1719 280.171 88.3267 cv
278.061 88.3267 li
274.692 88.3267 274.556 87.46 274.556 84.0259 cv
274.556 78.7656 li
278.197 78.7656 li
280.818 78.7656 281.907 78.7656 281.907 81.7358 cv
282.588 81.7358 li
282.622 80.7461 282.452 79.292 282.452 78.3018 cv
282.452 77.188 282.52 75.5171 282.588 74.8364 cv
281.907 74.8364 li
281.805 75.5479 281.805 77.4971 279.048 77.4971 cv
274.556 77.4971 li
274.556 68.71 li
cp
266.357 66.8535 mo
265.643 66.8535 li
265.506 67.4414 264.655 67.7197 263.43 67.7197 cv
247.979 67.7197 li
247.128 67.7197 246.209 67.689 245.834 66.8535 cv
245.154 66.8535 li
244.779 71.7729 li
245.664 71.7729 li
246.243 69.7617 246.379 68.9883 249.442 68.9883 cv
253.901 68.9883 li
253.901 86.2842 li
253.901 88.4502 252.607 88.481 250.803 88.5122 cv
250.803 89.3164 li
252.505 89.2856 254.105 89.2549 255.738 89.2549 cv
257.236 89.2549 258.7 89.3164 260.333 89.3164 cv
260.333 88.5122 li
258.529 88.481 257.236 88.4502 257.236 86.2842 cv
257.236 68.9883 li
262.409 68.9883 li
265.132 68.9883 265.03 70.1021 265.132 71.7729 cv
266.051 71.7729 li
266.357 66.8535 li
cp
234.091 78.3018 mo
240.592 70.3188 li
241.34 69.3906 241.987 68.5552 243.417 68.5244 cv
243.417 67.7197 li
242.463 67.7197 241.544 67.7817 240.625 67.7817 cv
239.333 67.7817 238.005 67.751 236.711 67.7197 cv
236.711 68.5244 li
238.447 68.5244 239.128 68.5244 239.128 69.4219 cv
239.128 70.1333 238.209 71.1235 237.801 71.6494 cv
233.342 77.188 li
228.577 71.0923 li
227.931 70.2568 227.454 69.5454 227.454 69.1738 cv
227.454 68.5244 228.816 68.5244 229.36 68.5244 cv
229.36 67.7197 li
227.965 67.7197 226.604 67.7817 225.208 67.7817 cv
223.643 67.7817 221.124 67.751 220.477 67.7197 cv
220.477 68.5244 li
222.485 68.6792 222.655 68.6172 223.643 69.8857 cv
230.755 78.7969 li
230.755 86.2842 li
230.755 88.4502 229.462 88.481 227.659 88.5122 cv
227.659 89.3164 li
229.258 89.2856 230.824 89.2549 232.355 89.2549 cv
233.921 89.2549 235.486 89.2856 237.188 89.3164 cv
237.188 88.5122 li
235.384 88.481 234.091 88.4502 234.091 86.2842 cv
234.091 78.3018 li
cp
223.995 84.5825 mo
223.246 84.459 li
222.191 87.46 220.829 88.3267 216.881 88.3267 cv
212.048 88.3267 211.504 87.3672 211.504 85.0776 cv
211.504 70.752 li
211.504 68.5859 212.797 68.5552 214.601 68.5244 cv
214.601 67.7197 li
212.899 67.751 211.333 67.7817 209.768 67.7817 cv
208.237 67.7817 206.671 67.751 205.071 67.7197 cv
205.071 68.5244 li
206.875 68.5552 208.168 68.5859 208.168 70.752 cv
208.168 86.439 li
208.168 88.2026 206.773 88.605 205.071 88.5122 cv
205.071 89.3164 li
208.066 89.2549 211.062 89.2549 214.09 89.2549 cv
216.983 89.2549 219.842 89.2549 222.735 89.3164 cv
223.995 84.5825 li
cp
182.146 77.7446 mo
182.146 72.1445 185.277 68.2461 190.246 68.2461 cv
196.066 68.2461 199.061 74.5889 199.061 79.292 cv
199.061 84.8921 195.93 88.7905 190.96 88.7905 cv
185.141 88.7905 182.146 82.4478 182.146 77.7446 cv
cp
178.402 78.6421 mo
178.402 84.5205 183.746 89.7808 190.552 89.7808 cv
198.006 89.7808 202.805 84.0566 202.805 78.3945 cv
202.805 72.5156 197.461 67.2559 190.654 67.2559 cv
183.201 67.2559 178.402 72.98 178.402 78.6421 cv
cp
156.919 64.5654 mo
159.958 64.5654 160.484 65.3389 160.484 68.1748 cv
160.484 85.707 li
160.484 88.2852 158.945 88.3223 156.797 88.3589 cv
156.797 89.3164 li
158.823 89.2798 160.728 89.2432 162.672 89.2432 cv
164.455 89.2432 166.197 89.3164 168.182 89.3164 cv
168.182 88.3589 li
165.994 88.3223 164.455 88.2852 164.455 85.707 cv
164.455 64.897 li
164.9 64.8232 165.63 64.7861 166.237 64.7861 cv
168.912 64.7861 172.841 66.2227 172.841 71.3423 cv
172.841 73.9941 171.302 77.125 167.817 77.125 cv
167.291 77.125 166.805 77.125 166.278 77.0513 cv
166.278 78.2671 li
166.886 78.2671 167.534 78.3037 168.344 78.3037 cv
172.598 78.3037 177.055 75.2837 177.055 70.9375 cv
177.055 65.1914 171.059 63.6074 166.886 63.6074 cv
165.184 63.6074 163.766 63.6812 162.389 63.6812 cv
160.565 63.6812 158.742 63.6812 156.919 63.6074 cv
156.919 64.5654 li
cp
ef
177.021 108.332 mo
179.375 110.05 li
179.534 110.146 179.597 110.368 179.629 110.718 cv
179.629 110.94 179.502 111.036 179.248 111.068 cv
178.134 110.94 li
175.938 111.259 173.489 111.545 170.784 111.832 cv
170.784 115.045 li
179.884 115.045 li
181.856 112.945 li
184.529 114.854 li
184.815 115.077 184.942 115.3 184.974 115.554 cv
184.974 115.872 184.784 116.031 184.338 116.063 cv
172.121 116.063 li
173.203 116.954 174.284 117.717 175.429 118.354 cv
176.766 119.117 178.166 119.754 179.629 120.263 cv
181.22 120.835 183.097 121.313 185.324 121.758 cv
185.102 122.521 li
184.656 122.521 184.274 122.554 183.956 122.617 cv
183.638 122.744 183.192 123.349 182.588 124.495 cv
181.156 124.017 179.629 123.285 177.943 122.267 cv
176.352 121.345 174.889 120.231 173.489 118.863 cv
172.725 118.194 171.866 117.272 170.88 116.063 cv
170.784 116.063 li
170.784 122.776 li
170.784 123.158 170.594 123.476 170.211 123.731 cv
169.83 123.922 169.448 124.017 169.066 124.017 cv
168.43 124.017 168.112 123.731 168.048 123.126 cv
168.303 119.785 li
168.303 117.304 li
167.539 118.417 166.744 119.308 165.884 119.976 cv
164.421 121.186 162.607 122.362 160.412 123.571 cv
158.726 124.431 156.881 125.194 154.876 125.862 cv
154.526 125.258 li
156.372 124.366 157.995 123.444 159.426 122.427 cv
160.953 121.408 162.29 120.358 163.467 119.213 cv
164.517 118.194 165.407 117.145 166.139 116.063 cv
158.98 116.063 li
157.835 116.063 156.69 116.127 155.513 116.286 cv
154.876 114.695 li
156.276 114.917 157.645 115.013 158.98 115.045 cv
168.303 115.045 li
168.303 112.054 li
165.949 112.245 162.576 112.404 158.122 112.563 cv
157.74 111.958 li
162.067 111.545 165.439 111.131 167.857 110.718 cv
171.357 110.146 174.412 109.35 177.021 108.332 cv
cp
163.339 125.862 mo
163.339 129.967 li
175.907 129.967 li
175.907 125.862 li
163.339 125.862 li
cp
163.339 130.825 mo
163.339 134.803 li
175.907 134.803 li
175.907 130.825 li
163.339 130.825 li
cp
177.243 123.508 mo
179.311 125.226 li
179.693 125.449 179.884 125.64 179.884 125.862 cv
179.884 126.054 179.756 126.212 179.47 126.371 cv
178.516 126.754 li
178.516 133.688 li
178.866 136.553 li
178.866 136.87 178.707 137.124 178.388 137.316 cv
178.134 137.538 177.752 137.634 177.243 137.666 cv
176.352 137.666 175.907 137.442 175.907 136.934 cv
175.907 135.692 li
163.339 135.692 li
163.339 136.68 li
163.339 137.062 163.18 137.316 162.798 137.475 cv
162.449 137.666 162.067 137.762 161.589 137.793 cv
161.08 137.793 160.794 137.507 160.73 136.934 cv
160.858 133.688 li
160.858 125.99 li
160.858 124.78 160.794 124.017 160.603 123.636 cv
163.339 125.004 li
175.652 125.004 li
177.243 123.508 li
cp
ef
191.379 109.477 mo
192.907 110.177 194.084 110.782 194.943 111.291 cv
195.707 111.8 196.088 112.309 196.088 112.818 cv
196.088 113.708 195.643 114.154 194.72 114.186 cv
194.211 114.186 193.797 113.899 193.479 113.295 cv
192.907 112.181 192.016 111.131 190.743 110.082 cv
191.379 109.477 li
cp
189.502 117.049 mo
190.998 117.717 192.143 118.29 192.97 118.799 cv
193.734 119.308 194.116 119.785 194.116 120.263 cv
194.116 121.153 193.67 121.6 192.748 121.631 cv
192.239 121.631 191.856 121.376 191.539 120.804 cv
190.966 119.722 190.107 118.672 188.897 117.654 cv
189.502 117.049 li
cp
204.042 114.822 mo
204.042 119.785 li
208.655 119.785 li
208.655 114.822 li
204.042 114.822 li
cp
203.183 125.386 mo
203.183 129.235 li
209.133 129.235 li
209.133 125.386 li
203.183 125.386 li
cp
201.561 109.095 mo
204.456 109.509 li
204.997 109.572 205.251 109.763 205.283 110.082 cv
205.283 110.463 204.869 110.782 204.042 111.068 cv
204.042 113.804 li
208.655 113.804 li
208.655 111.068 li
208.655 110.782 208.624 110.177 208.528 109.223 cv
211.423 109.636 li
211.964 109.7 212.219 109.891 212.251 110.209 cv
212.251 110.59 211.837 110.909 211.01 111.195 cv
211.01 113.804 li
212.632 113.804 li
214.351 111.832 li
216.833 113.645 li
217.086 113.868 217.214 114.09 217.214 114.313 cv
217.214 114.631 217.023 114.791 216.609 114.822 cv
211.01 114.822 li
211.01 119.785 li
214.223 119.785 li
216.101 117.654 li
218.678 119.563 li
218.932 119.785 219.059 120.008 219.091 120.263 cv
219.091 120.518 218.9 120.645 218.455 120.645 cv
210.151 120.645 li
210.851 121.28 211.583 121.821 212.41 122.331 cv
213.3 122.903 214.255 123.381 215.273 123.762 cv
216.355 124.208 217.66 124.558 219.218 124.876 cv
218.964 125.607 li
218.55 125.607 218.2 125.64 217.882 125.735 cv
217.564 125.831 217.15 126.403 216.609 127.485 cv
215.687 127.104 214.701 126.53 213.587 125.703 cv
212.569 124.939 211.646 124.049 210.755 122.967 cv
210.246 122.427 209.673 121.662 209.038 120.645 cv
204.678 120.645 li
204.01 121.98 203.31 123.095 202.515 124.017 cv
202.483 124.081 202.452 124.112 202.388 124.177 cv
202.96 124.495 li
209.038 124.495 li
210.374 123.254 li
212.251 124.78 li
212.569 124.972 212.728 125.162 212.76 125.386 cv
212.76 125.544 212.632 125.671 212.378 125.799 cv
211.487 126.117 li
211.487 128.089 li
211.742 130.73 li
211.742 130.985 211.614 131.208 211.36 131.398 cv
211.105 131.589 210.787 131.685 210.374 131.716 cv
209.546 131.716 209.133 131.526 209.133 131.081 cv
209.133 130.094 li
203.183 130.094 li
203.183 132.703 li
203.183 133.403 203.597 133.816 204.456 134.008 cv
205.283 134.198 206.906 134.294 209.387 134.325 cv
211.646 134.325 213.11 134.229 213.778 134.039 cv
214.318 133.944 214.668 133.721 214.86 133.371 cv
215.973 129.839 li
216.737 129.839 li
216.609 132.703 li
216.609 133.053 216.769 133.371 217.15 133.657 cv
217.532 134.008 217.723 134.39 217.723 134.803 cv
217.723 135.247 217.532 135.566 217.086 135.788 cv
216.705 136.075 216.005 136.298 214.987 136.457 cv
213.746 136.584 211.932 136.647 209.515 136.68 cv
206.714 136.68 204.774 136.584 203.692 136.329 cv
202.77 136.233 202.038 135.916 201.497 135.375 cv
201.051 134.866 200.829 134.166 200.829 133.212 cv
200.829 125.767 li
200.511 126.054 200.128 126.34 199.684 126.658 cv
198.315 127.708 196.724 128.63 194.847 129.458 cv
194.465 128.854 li
195.516 128.217 196.406 127.581 197.202 126.912 cv
198.092 126.148 198.856 125.321 199.556 124.431 cv
200.32 123.381 201.051 122.141 201.815 120.645 cv
196.438 120.645 li
193.861 128.949 li
193.702 129.426 193.638 129.871 193.606 130.349 cv
193.606 130.985 193.734 131.749 194.021 132.671 cv
194.402 133.784 194.593 134.516 194.593 134.929 cv
194.593 135.629 194.434 136.202 194.052 136.68 cv
193.734 137.093 193.384 137.283 192.97 137.316 cv
192.524 137.316 192.174 137.157 191.889 136.807 cv
191.57 136.425 191.412 135.853 191.379 135.058 cv
191.379 134.866 191.379 134.516 191.443 133.976 cv
191.539 133.467 191.57 133.053 191.602 132.703 cv
191.602 131.939 191.443 131.335 191.125 130.825 cv
190.87 130.38 190.266 130.062 189.248 129.839 cv
189.248 128.98 li
189.82 129.235 190.234 129.362 190.488 129.362 cv
190.87 129.362 191.22 129.012 191.539 128.313 cv
197.202 115.427 li
197.965 115.809 li
196.724 119.785 li
201.688 119.785 li
201.688 114.822 li
200.606 114.822 199.524 114.886 198.442 115.045 cv
197.838 113.455 li
199.11 113.645 200.383 113.74 201.688 113.804 cv
201.688 110.94 li
201.688 110.654 201.656 110.05 201.561 109.095 cv
cp
ef
232.533 109.572 mo
234.792 111.323 li
235.015 111.513 235.111 111.704 235.143 111.958 cv
235.143 112.277 234.952 112.436 234.538 112.436 cv
230.688 112.436 li
230.688 119.913 li
230.911 119.913 li
232.533 118.163 li
234.697 119.817 li
234.888 120.008 234.983 120.199 235.015 120.39 cv
235.015 120.708 234.856 120.867 234.538 120.899 cv
230.688 120.899 li
230.688 127.866 li
232.215 127.549 233.679 127.135 235.143 126.626 cv
235.27 127.357 li
232.756 128.949 229.861 130.476 226.584 131.971 cv
226.33 133.053 li
226.33 133.308 226.202 133.435 225.947 133.435 cv
225.693 133.435 225.502 133.276 225.375 132.894 cv
224.102 129.712 li
225.502 129.426 226.838 129.044 228.175 128.566 cv
228.175 120.899 li
227.125 120.899 226.075 120.963 224.961 121.153 cv
224.325 119.531 li
225.629 119.754 226.902 119.849 228.175 119.881 cv
228.175 112.436 li
227.03 112.436 225.884 112.5 224.707 112.69 cv
224.102 111.068 li
225.47 111.323 226.807 111.45 228.175 111.45 cv
230.784 111.45 li
232.533 109.572 li
cp
244.974 111.195 mo
244.974 116.667 li
249.555 116.667 li
249.555 111.195 li
244.974 111.195 li
cp
238.006 111.195 mo
238.006 116.667 li
242.492 116.667 li
242.492 111.195 li
238.006 111.195 li
cp
244.974 117.526 mo
244.974 122.871 li
249.555 122.871 li
249.555 117.526 li
244.974 117.526 li
cp
238.006 117.526 mo
238.006 122.871 li
242.492 122.871 li
242.492 117.526 li
238.006 117.526 li
cp
235.397 109.095 mo
237.751 110.336 li
249.459 110.336 li
250.796 109.095 li
252.673 110.623 li
252.991 110.813 253.15 111.004 253.182 111.195 cv
253.182 111.386 253.055 111.513 252.8 111.609 cv
251.941 111.958 li
251.941 121.758 li
252.164 124.366 li
252.164 124.621 252.037 124.845 251.783 125.066 cv
251.528 125.258 251.209 125.354 250.796 125.386 cv
249.969 125.386 249.555 125.194 249.555 124.749 cv
249.555 123.762 li
244.974 123.762 li
244.974 128.599 li
248.187 128.599 li
250.064 126.499 li
252.641 128.408 li
252.896 128.63 253.023 128.854 253.055 129.107 cv
253.055 129.426 252.864 129.585 252.418 129.585 cv
244.974 129.585 li
244.974 135.312 li
249.682 135.312 li
251.687 133.212 li
254.359 135.12 li
254.614 135.343 254.741 135.566 254.773 135.82 cv
254.773 136.139 254.583 136.298 254.168 136.298 cv
236.129 136.298 li
234.983 136.298 233.838 136.361 232.661 136.553 cv
232.056 134.929 li
233.424 135.184 234.761 135.312 236.129 135.312 cv
242.492 135.312 li
242.492 129.585 li
239.247 129.585 li
238.102 129.585 236.956 129.648 235.779 129.839 cv
235.143 128.217 li
236.51 128.472 237.878 128.599 239.247 128.599 cv
242.492 128.599 li
242.492 123.762 li
238.006 123.762 li
238.006 124.24 li
238.006 124.621 237.847 124.876 237.528 125.066 cv
237.21 125.258 236.829 125.354 236.383 125.386 cv
235.875 125.386 235.588 125.099 235.524 124.495 cv
235.651 121.504 li
235.651 111.323 li
235.651 110.177 235.588 109.445 235.397 109.095 cv
cp
ef
283.548 110.718 mo
286.348 112.722 li
286.602 112.945 286.729 113.168 286.761 113.455 cv
286.761 113.772 286.57 113.932 286.157 113.932 cv
275.212 113.932 li
275.212 133.816 li
283.93 133.816 li
285.902 131.589 li
288.702 133.594 li
288.988 133.816 289.115 134.039 289.147 134.325 cv
289.147 134.644 288.957 134.803 288.511 134.803 cv
263.917 134.803 li
262.581 134.803 261.276 134.929 259.94 135.184 cv
259.177 133.339 li
260.768 133.657 262.326 133.816 263.917 133.816 cv
272.476 133.816 li
272.476 113.932 li
266.145 113.932 li
264.84 113.932 263.536 114.059 262.167 114.313 cv
261.436 112.436 li
263.026 112.754 264.585 112.913 266.145 112.945 cv
281.543 112.945 li
283.548 110.718 li
cp
ef
305.694 108.837 mo
309.257 109.346 li
309.766 109.41 310.021 109.601 310.021 109.951 cv
310.021 110.301 309.576 110.619 308.653 110.969 cv
308.653 113.578 308.557 115.805 308.303 117.683 cv
316.988 117.683 li
318.993 115.423 li
321.761 117.428 li
322.047 117.683 322.174 117.905 322.206 118.16 cv
322.206 118.478 322.015 118.637 321.602 118.668 cv
308.907 118.668 li
309.989 121.341 311.102 123.536 312.28 125.317 cv
313.616 127.418 315.27 129.231 317.275 130.822 cv
319.12 132.35 321.093 133.495 323.192 134.322 cv
322.843 135.181 li
322.333 135.181 321.888 135.244 321.506 135.371 cv
321.093 135.435 320.552 135.976 319.852 137.058 cv
317.975 135.976 316.352 134.608 314.92 132.891 cv
313.203 130.981 311.802 128.85 310.688 126.432 cv
309.703 124.459 308.843 122.009 308.112 119.082 cv
308.048 119.336 307.984 119.655 307.889 120.068 cv
307.507 122.264 306.902 124.236 306.012 125.986 cv
305.249 127.673 304.326 129.168 303.18 130.472 cv
301.907 131.968 300.476 133.272 298.821 134.449 cv
297.39 135.499 295.576 136.612 293.381 137.79 cv
292.745 137.058 li
295.099 135.53 296.881 134.227 298.09 133.145 cv
299.808 131.586 301.239 129.899 302.448 128.054 cv
303.721 126.019 304.612 123.823 305.185 121.404 cv
305.375 120.514 305.534 119.623 305.662 118.668 cv
297.485 118.668 li
296.34 118.668 295.194 118.732 293.985 118.923 cv
293.381 117.3 li
294.749 117.555 296.117 117.683 297.485 117.683 cv
305.789 117.683 li
305.917 116.346 305.98 114.564 306.043 112.337 cv
306.043 111.51 305.948 110.364 305.694 108.837 cv
cp
ef
344.484 108.71 mo
346.806 109.696 li
347.061 109.76 347.188 109.919 347.22 110.205 cv
347.22 110.459 346.806 110.651 345.979 110.81 cv
345.692 111.16 345.438 111.478 345.152 111.764 cv
345.152 111.764 345.152 111.764 345.152 111.796 cv
346.106 112.369 346.583 112.941 346.583 113.546 cv
346.583 113.864 346.52 114.086 346.36 114.246 cv
346.233 114.437 345.979 114.532 345.597 114.564 cv
345.247 114.564 344.897 114.31 344.484 113.801 cv
344.197 113.482 343.974 113.228 343.752 113.037 cv
343.434 113.26 343.052 113.514 342.575 113.801 cv
341.875 114.182 340.888 114.532 339.616 114.914 cv
339.393 114.31 li
339.934 114.055 340.347 113.832 340.666 113.609 cv
341.207 113.291 341.684 112.91 342.129 112.433 cv
342.256 112.273 342.383 112.114 342.542 111.923 cv
341.843 111.287 340.92 110.587 339.743 109.824 cv
340.252 109.441 li
341.652 110.014 342.67 110.459 343.37 110.81 cv
343.72 110.301 344.07 109.601 344.484 108.71 cv
cp
344.356 115.042 mo
346.679 116.027 li
346.934 116.091 347.061 116.25 347.093 116.537 cv
347.093 116.791 346.679 116.982 345.852 117.173 cv
345.534 117.459 345.311 117.682 345.12 117.873 cv
345.247 117.937 345.375 118 345.534 118.127 cv
346.552 118.668 347.061 119.209 347.093 119.782 cv
347.093 120.132 347.029 120.387 346.838 120.545 cv
346.71 120.769 346.424 120.864 345.979 120.896 cv
345.597 120.896 345.184 120.609 344.738 120.004 cv
344.356 119.623 344.006 119.304 343.656 119.019 cv
343.211 119.273 342.702 119.559 342.065 119.877 cv
341.27 120.195 340.188 120.514 338.756 120.896 cv
338.502 120.259 li
339.139 120.004 339.616 119.813 339.998 119.623 cv
340.602 119.304 341.143 118.955 341.652 118.509 cv
341.875 118.318 342.065 118.127 342.289 117.937 cv
341.588 117.396 340.761 116.854 339.743 116.282 cv
340.252 115.932 li
341.461 116.314 342.416 116.664 343.116 116.982 cv
343.497 116.537 343.911 115.9 344.356 115.042 cv
cp
336.784 108.328 mo
338.82 110.269 li
339.011 110.459 339.106 110.619 339.139 110.81 cv
339.139 111.128 339.011 111.287 338.756 111.319 cv
337.516 110.937 li
335.989 111.255 334.621 111.478 333.348 111.637 cv
333.507 113.928 li
335.289 113.928 li
336.657 112.56 li
338.471 113.928 li
338.662 114.086 338.756 114.246 338.756 114.437 cv
338.756 114.659 338.598 114.755 338.248 114.787 cv
333.571 114.787 li
333.761 117.65 li
335.639 117.65 li
337.007 116.282 li
338.852 117.65 li
339.043 117.809 339.139 117.968 339.139 118.159 cv
339.139 118.414 338.979 118.541 338.629 118.541 cv
333.825 118.541 li
334.016 121.372 li
351.356 121.372 li
351.61 118.668 li
351.324 118.668 li
350.179 118.668 349.033 118.732 347.824 118.891 cv
347.22 117.3 li
348.588 117.618 349.956 117.777 351.324 117.777 cv
351.706 117.777 li
351.96 114.914 li
351.547 114.914 li
350.401 114.914 349.256 114.978 348.079 115.168 cv
347.474 113.546 li
348.842 113.864 350.179 114.023 351.547 114.055 cv
352.056 114.055 li
352.311 111.319 li
351.547 111.319 li
350.401 111.319 349.256 111.382 348.079 111.573 cv
347.474 109.951 li
348.842 110.269 350.179 110.428 351.547 110.459 cv
352.088 110.459 li
352.056 110.333 li
353.424 108.964 li
355.142 110.523 li
355.46 110.778 355.619 111 355.651 111.191 cv
355.651 111.414 355.555 111.573 355.333 111.669 cv
354.538 112.178 li
353.71 121.372 li
354.188 121.372 li
355.651 120.132 li
357.75 121.723 li
358.005 121.85 358.133 122.073 358.133 122.391 cv
358.133 122.582 357.974 122.741 357.592 122.899 cv
356.796 123.122 li
356.001 123.95 354.919 124.841 353.551 125.858 cv
352.819 125.477 li
353.488 124.3 353.965 123.25 354.251 122.263 cv
330.93 122.263 li
330.898 122.964 330.802 123.6 330.644 124.173 cv
330.453 124.872 330.167 125.382 329.785 125.763 cv
329.498 126.082 329.18 126.24 328.83 126.24 cv
327.939 126.24 327.494 125.795 327.462 124.872 cv
327.462 124.618 327.621 124.3 328.003 123.887 cv
328.385 123.504 328.735 123.026 329.084 122.391 cv
329.466 121.659 329.785 120.769 330.071 119.654 cv
330.802 119.909 li
330.866 120.418 330.898 120.896 330.93 121.372 cv
331.885 121.372 li
331.312 112.05 li
331.312 111.287 331.152 110.396 330.802 109.346 cv
333.189 110.651 li
334.398 110.014 335.575 109.25 336.784 108.328 cv
cp
349.319 123.632 mo
351.451 125.763 li
351.77 126.018 351.928 126.24 351.928 126.495 cv
351.928 126.813 351.738 126.973 351.356 126.973 cv
350.306 126.973 li
348.46 127.8 346.71 128.436 345.024 128.945 cv
345.056 129.009 345.056 129.104 345.088 129.231 cv
345.088 129.391 344.897 129.581 344.484 129.836 cv
344.484 130.217 li
352.311 130.217 li
354.156 128.085 li
356.765 129.995 li
357.019 130.217 357.146 130.44 357.146 130.694 cv
357.146 131.013 356.956 131.172 356.542 131.204 cv
344.484 131.204 li
344.484 134.449 li
344.484 135.53 343.943 136.39 342.861 137.058 cv
341.97 137.534 341.143 137.758 340.379 137.79 cv
340.379 136.993 340.284 136.421 340.029 136.008 cv
339.838 135.53 338.82 135.054 336.911 134.576 cv
337.007 133.686 li
341.238 134.671 li
341.652 134.671 341.843 134.48 341.875 134.067 cv
341.875 131.204 li
333.03 131.204 li
331.885 131.204 330.739 131.268 329.562 131.458 cv
328.957 129.836 li
330.325 130.091 331.662 130.217 333.03 130.217 cv
341.875 130.217 li
341.875 129.453 341.843 128.595 341.748 127.608 cv
343.879 128.341 li
345.152 127.608 346.297 126.781 347.315 125.858 cv
337.771 125.858 li
336.625 125.858 335.479 125.923 334.271 126.113 cv
333.667 124.491 li
335.034 124.809 336.402 124.968 337.771 124.999 cv
347.951 124.999 li
349.319 123.632 li
cp
ef
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Vicky) ()%%Title: (PolyU_Logo_RGB.eps)%%CreationDate: 19/02/2010 12:20 PM%%Canvassize: 16383%AI9_DataStream%Gb!R&kB\noZ7,Y,!;?K%Z,q**^kiK.EQ/#l65qTq0O\S,qo?GE;c4ucdg<p>Zd.7ig$`=V\l:.ZQDtZ.k/WBWVa'J/a8a9V"j5/I%]O+2;IZ@2#K#)4%7[faV,Zm*u6N%O5$9AN.5*9;7GTi?FknF5<(!#^\[ksO\9uh*b2Cj`Aj68,T0DoOEr9)<W4DFX2dVq2FgRfQG%gB1e:GJ_+]qa7>FSpiW]I[Wl*W0(]Ko8EUPF0YLX8^iWj'h$Qq^137K1OoX:d;QSkACMYQ3mn`CPr^;Mn9B[/M!t-5XYcZf1]S1-%O=Zn\c:A'oIOZN3'LTcf"YhU)=T!e\(^>Gb.9b[-U$!AogRl`gc$=e$H4;CG9ZN@ck&^TRj&CX)U]4,02#PN!D0WTi?2C-$Rr\lL%Ob6LJ+JSF6V$G4OGm^b'P[>+."=#56cZQ6[J+]YQ1I0*+Il&7nH87L`qJDX^\`s%#s$&adRc>egr`=PhZPZ<`]2=&1di`jtQ<ucs%GGLq\K\nEnRtsfRrZA9B.sIpNVd4!HS1u';&0YFie.H)bC<\sU>&I@^i,U$$lJm5MEL^YQERMLUaWq.Dkbi-&,*>[u)$,f8EIO@S%[%V4,?Pu%ZL1%!5La$e+n-W4jEn^!U7i@W`Za@C/Q"e".YIVaL;t<.t-A`H,s(V0+AX$Wso=6\U#Qd\%37m+c<9!fk`[m*1L%.**%&E'g$*r'1Ilnf]+j_*:cqug>59]R)L^Y^]acl6!r@/;MFPLTK[Dul"Le+$mf1AW!f6FkCO-2Hk*[*DtWAa<!(cboaDd\-WO?1d;X%U=l/l*<F!`VNP;8#VY4&ec34q?'IN=3;(nbf$`b8BfM[q@'u<_W8iA@:+,J&6!d(+W?8TbODFg0i(4SqUr1d<4906DH_=]@;.lcB%PlESWPM=mOh6mno9`=eO@b1/&a5`itf(_dgXu,0>eGm9nN%=hCk].p^BR(l"K6\`h$NG7D5]?N3i8K/AoKmUYm!#AP8[%$[)Sk@C%2NmuS'up+Ah&6h$ZYuD,LmG+(FP^pHV;"5@\b,7l%8l/l5O&4n@\oi048tfo2o1!uCJH,`F5AG-T!oV'rZ)[tWVYUoB:ZR'$YfDC%Z@MO26a6R3ZdJR:&cT\?nV*Q#M_u<gq.nWT]P)aerg5?agBYnQWEgqPV%:3LpcfO>!k(>Ss#i:!Kc>8&8;dNo@ZQ(Qj<&2q(Qjsr%feh#"lU%p%_kS!9Tm6[J0Kb]q5N[?nOequ:J)HAdq!eM^J,;8+\c;Jjnopc"n]$@)m.caL?JP;NP;"0T0:k5O8tWUDora`NY\B72%%=6Rq\N<#2IV'B%S*.ilnL_:@=)EK0n20\J!JHi;^e'2V"H&P&OJXH=&&X2C:QtE:j@KZ6\=oBZ)P#6u+j9cSL[^DFJ?SOtr7#G^%_A5#EPN7EDo&1(niBNco+3Drb_#/[S1B90fg&P2n<P?(TF5HNmhim?_^nU%rIN+E[3W3I`2_4Ze2c=_\%o&L`:)LK'peLXKH-d<*%d!'OhOIKpkBf6jT9td!g)rr@8R?ApOE2YSW-fcULBk`W`;n6H]'Z#Vj\!W6T2bhXC;fFur&7K>Q#q1S.J(FX+$o+AfG[PKh#H4BJ%\2isOgW2,"5iChHdEYI_Ae$0bQNB@=RnfIDX@'#>#V:hO'V&OkONYDC0/!:Cc8kkA7^)X<5+iU-k>UGW.9"Y!6t7XTJm>W#^?V^4%R\RWdZWh:paiF#,"ZY%uWrmnPo0")0j#@mlBtq'C9=(JJr6lcH!2&K*mQm3uQ';GP3C\FSrgEeS.)ZGZNb7a025dd/S`#7*Il2uh%[4c9eg%657#1qL'kns<4SiWY:8Ff$5iOD%43aO50p=p3hrcVVM50bA!*p*[N!>3caSqR"=aPIk>r\Z,j4&WrEr;4ai;"DKuY,hDK%PFuRfngs()lbCZkBR9'bCd.jtG;\&<a+p'c'04+S#ltY0b)ZM3>Q?DV7B$.!+JlEj^]04on\6UZZXLWIJ%I=6oCbd]@(X4G(AH_;%]ZT@=j#3Ak?=rflhk#hC6=`E(Y-[r9hjO5ObXh!nn'27ePRn`,2<md3DU45%f6[G>o2=UO]*YmbF79HMdcXllP4167j`g\3X?Ta4%\)YH7/`A:sJ)1$TOnuOapm1'e%X:A,ifRO\O6qsjH18[V6tcGgo=<B80>@D]%c/]:-?hf*IP'B/GHUkdNgMZr?VRAb2#$=`QGE)C%Dk"Q4e,GYf23A5t+]P98K+S6bj2Kg2PrF45](Q0`k$.tT&e67R7HGsub9.5=V--U;6K'a70iRlWT&H'$4jjb3,"Z,<:=\9kV$qTR%0'3h7Pqs`q!I6kGNb4J%0M2-P@*nB;B3IdH'apSVXt)h4cF'i63SL\]QjopB8cH<nT=M_dl-Gj$rieWeA'ES.nPZJLl7SN2aaZ1>%W6;:D+662"RT!TH+PH+)d/mW)O%8eE?5ek(G3W<.DFpDSE/8k58SY\o+u#_gT,JYEnY3u%P1juEAudq.NnS(KDgJ6Clq`-_-m&3q%OJN=X3*Tuqnr8JuV"%g?FFpg2/h__d%/V9k5FYHh"3G'93NR`TfJJqf&k!WOOf5o0%b2<(#=8IFn5RpI^om(pZm0^(X$R_&J+@&2%2a!tZ<@qM4qCbS7,"]iMF!jK]0TNVc'/K3[CGTrr6s\<<DAJFCj&Q5K(9%P6W],.=#WIN+Z`7<r#<W=pfl[<S)tYL0@%Ta;&[eS@%[$jR"%T@<@WM6=f/Hj7C2sRk<\_CPo^-Q/?YK8<K0KL5`cp"$C;)`;t;L']23)s,QV8]1N%0("BF1]1O_?)Nbp!lKN[lkQ;#CEeq%@g+-E"[t%^8@]F[e*LUFS@k2b5&ZO/dY>iV/(8+.O7X2KaWMN;PO^U[I/0TWU(,fr7PA33BR\']q*fu18-?E/4V="W=pcQI/%M,O%Z&J:?]=Uko87MBHG8gKJ'hft'KUeC8QSd3i,B!Q3QB9Za'luS`SeBM\]u][g<0TRt*Z]arO2![As+P"?8UAe]]$!QG%FI(B@c*#1%`/6[e'D=:GCDI"ib5d=H`&G?rK\3Yq(f.aM8*#q!IhB-D]%=%>*(h\3f7&30@#d<CL@%5!S0I]AO(M-4Kg'SIIoMKYOt40%K>\18%0>$iWk>plXoP%+A'75s.8+T,]BNPnj4u7/^PZb7l,L$ig0O$mL.@MPdI3b6kkfsecWS>pHCi)5@_/[@S?OhL=1bpH'q2uLKopbWC%?tL]j"'YCbY1-"2R2$jtlT^Sdff-;'K3Ucj`1b(ndN6#BQoRh\GN^Rtm>$;s_s>SL$n_XD@kh_F;@'dVF#6e@$s:,<\<i[#DLW=W%,BT9^:&#g+()Sgri]@(*d-\a4eP"Qp(ZUGdJ=0*OT7'_H)!dm2-'A$K#;J]JY19.o2j*9@YX3MJ&%EC>q]$WLQoXoj]V60&nuUau%g*r6U'NrDP$Ne]F'3MFsT)Oc`-//"./f4o<7f*7I_remC9.Tr\1b7-TdKj]PF?FQ.XO])?kR6Y:*E][oJ$*M9"N+Hd46d.W+*g%>%.r(&)o)AOE/%]nm&r3(6<&TW4>KuEVJ[i;j++J`ko)5)*mQ;Re4SPBb*!Eb-EcP(JP&.bj'C\Jm4`o8Zp<]/Ag-]ckCJ3,fR,_X&%6'.U,IlbZUCf`"5cgf(Jgp&a67QP)BbSFTcUq+k]Z':4KR$q"fG,MHgG.f:WA@5t(2(&JdLOO8A_Sq<J,i6u=b-jcrD.YU$Og.fN%'.E8:57ZX0d;_;;WSt8DXJ_9L(_;B7N\Cn3e^>kPq+qM;YSu-5E<_J1;u5f<fZQ@?%^M&2O_:I:hXi@F796bK)g'4TVWjke)+((R%H>;H`V`Eq3KJ8=sD+l8M,t6K12?Gn18PX"pNfHfh/=h<O2!]?Uc/gdaA[820m#F%k`#T.#`N`ck-@6n:3LlVnT?-$%`5nY8PMpJ3%bnNS:RhZ<afi><TXsSgYO\f'qi"hap3B,aF*-+]sV*_1URt$=U^IRkB'6?4M;Y-rm?K.e5:WMA'l2:#?FAUFGQXQtC,P=K1"f2`e%bJeM(nR!=aNaFC%lMc+WeFVV!@=+cm"Qr=MoC6M\J1Y]]r>rF;D!&lJN:Do44I1p&&2tj%\/GnTC';4rFJ;N&a`kRB3T$\)SRlKC%;F9:.D>W,&'02;R8(J9S4@o`m1JY)[]*A]sfe^2QcWRr2efT%IYe!]E<oJ.#`,k>1\CI+m-$Z"tNfegA@N?GJS90:BqO`2dPR8ps%R6Fp%';6saFdanVdq6NZn)B2(e57Iu(U9G)BdEg6$)h@J`:I$kC9t')-)eKCHT>::PK#N@C@eIsrg=4@j8j7:TM6n8mt!1f;*cM<%S:8E^o?WXV;?,N:C#kmDs$A6d*;N2'M\a:hS=sPk'WtQhG.84b],:eZru-Ie))(n$ct\#3)+h9<G\@t"\(Mjsm1s0(QlcO]?6'(?%rqRC^BM8=ghOA6ULWr%sj1RI@!3=5B5$PC@#ecF!&N`9>(jWJ#&.#!Vs7fM7^-D3B7KZV(Q12ek!4k>\:V9i$gNdkiBhf[HU7)Ah%rdBl3W'K#$M@qi!8K6U%[Jjjt6#e%8C<iZ%Dt2X%2>]`GcVT%f54*ilUWCtk&Xr?T2e?Ta(>"o&705*Z>X>A6Vg7&g?"+^q\JXq>%+3:":?We"[lJ.6s::!5tjX44AaI0d5Jq38fCbY<mbYZ!f?8:M\hSbjf32Ue?UQ&bZ7-6OUL<\ue%Zd9Y60u&aa@QI\jLGfTdI#?-%F53E+3$Q\i$j)lSfF)\]jdL8)bg8:eN%(<a.c4LYd8=X%s*.`m`Ug2Fa+)lY"*OaLD4T=&Eahm_BAX)L,&&e&-Np.45k`D0>&:,K%7CQcI#F(DmA*lH9Dsj6X>Q.:k&[A#]MT3>UZ56A<Qg^suDXOrPEg#F?&m>V6O?:23I?#@2*:E2Q+(M58mU\MQSQ<IORI2JB=q8J;%H\Ho)1#!<.W[2(8PJ+":STDi>g<8>uG.M@FjUuX+$ITp'9i87V=0W^>G-_!`M+I=_2OS,hB2$_ibjO'a;mk*=4Q!8If<PXOFBdrN%*jpo_`*RY%W*6)"j,(`q0I&b]k/FOU4SKPNjhAdC=mk?ohMWE]gP^*7gNgki%JLok_;Zhbg9Lji,Gm]Eqs3F3>eQ6/[i^k$Q[-gs%%*Gd,bUi9)/]NC#Ei@F^oE?tSard9KMk@0`@Xa[b5%["M]m6;!51'RTI-_X'FR:H&E4kof_Z?!7Kt$L)(k1lO'Mgb;JUBTQ[?J4^%Di\EK*h/^S0:;_G7GFXsIiU$2\G,rS>`dd$jtC0cd;37[Y$@&(Oe_g&mG<<(h&N(prFkH%errV$WFSqtp3/\UrO:6NIMb3(Mbg*$%Md5XmpBTY!cL.=u=C4nW^OOMj7d[nXki)>d;Z(u(m#,=np;uHom1VNAaNtjDG4BZt%qH@J,k6G^3gkF?fnB$pcOWD5R$8\M=5WQW%)RWt]E,r2]:l;+F)6D$'Z`nj'(<1:?KDWr8L1tM>@^&@t+ACuiLhrh4GnqHSlOfl?;19&liX0JXGA7ij\p[mY2@juSJ`tPsN?Y##%D\riLiX8YdXV23ENZOGrP[=Y+V),Z/+]eH$JM@Vr"BbD\MB3e'@SH=%H`4`*3'>j^HsODDQ.-?LGaE\^)$N(_:Gi8]FTgpTi=5&t%EO^u=jGWJoe6mT_3T3R)C?Om$YA!G^H1k0O2YVCc6L4&#I2..Bb?YnS=2iM?r_N7N2:M4%o3A'i/edhJkWG-el0*PeHd#c]MdI"`%L&RF#h#I9^G0>Tc#Rpo!q@LW8c<)/AFo1cYQFj4ecH=+Fk=hb48naXe@J/fI`-(_I^A0!LkX\6%ZhsFk<j$m4?S#!t6s5*Ol9[U.%""L6ROIXM2g_VM)Fb3o]j5@F<Q!^gJAq>SqK5qR6,8,psa6>PS=rAb^0!)Vq1?TYOAd_9YQjZK`don'lIS++13J^H(5K]\GZUBg7%W'<#qS[S\=&L0;h`D'McLNY'(6;P*/PbPQR=m&`qJArF?R+kLDEG-,@l?a>E[N-uBH_m.?hnH_EM,2?JGn$pV_g;LPX\(#`CSe/!%,X%77$GKoNIbop5L,hjBo<lTR$<u;LkZ;JST-,s:L12Xfq(h-WYKGh)iI8>Y5;CQ\b"(5'eE7"AC4DOB7:+1Gn]Q9\E"[9c5)':o%-9ii>r7AUQSKEm[a16NbE<eb!75Y(/;J^`sP]u0IF7/1s[g0+MmcK4:XX@o-E:J"Q.KHp;Su`)gpQ&<SKu3n'YB@:Dm2eG8"ohG9%EP7._?*HIJp=mjJe=VMqY@7>/CGaiY^aT'NnL8UB++u!>nj.s>&\@r*-IO/R!k*bYehko\PX:-i&%\Sl4U"Rjc,D<.-f$C<:OPY*%:M-5lZ.n#\SmDhtF136h"m'GZpQ7V;()#!UiuYQmD)Y6T/`(QXM`Rb#`LT;U6,Rnig<T'-X$t0DZ>ji2=W!"T=`^&nSNgbdZd<n&%rorLC1V/d6J"8J-e*u\n#hk_MZAn;7nJa.hfs@ZjGS]Q[e/,mX=#bUS^SAHD%NrZOJPF;6n+[*9I21ir9';$nMM<2;7)Hd8Hl($M%#irBP:'[>aJrP^%64Q?`*7-,)1bhCO<&f@X[jf,^XRIY%D)7#*Pg+j3%M[Us4?StnA)cn)q;hX!\iYXrSoZ/+naN6]X@gHaCOu[E%4eMF#<%)ZFS['r,EM9J#G1D:#/V>qg'<%kJ!^r=AcUTIU%-3NIl$pkRJiO'q]SqKf>eDToSq6f4Kr@*kr/'&-Xc!Wu33^A#TLR4!%B9d%;i<O$1.q6VA`KX3@6-L3h[Nm?b%:[Ti!B#b&B+=;Xj(TWpfFUA!:\X\+0IVN#&,LO(j[EN.j/U8/6P/AI5RAr<;$7NFL'3$;%;EWHq]IrFDWhah"(JOBiH"oC$Ba_,Z,E$!>n1-E89;5)r;[c;S)ETKTWk\%VcnsgOm_'HC^IYMVIl8chpS9ipqO\110[dKDfZJ*6%r,LT7PQR$N=><E_AQ#P9O7.V^;B03h[dUe]rnDe.e/nPSb,1,:-i!M&I5jU**RP*3c9Npm$tq>h`GRec/A$@4-fGlt`YkL&C--dW%(J5KiMjpX(g"B/mS5B2jb2&#6QeC-&Ba[&U@J60KNY9=96frt=^)t9Xb%(%ljAu$nK$aBdW?&#eo0SCm'6,7fDfpt9Uf>lm/*&.M%0%)dh'JJf!F\.7(U_<d&.>huk_t*S$G0cHS4EBppI%3=6H-%5B^f(;QSUXfj3:RQK+AZ^ri5@urU3M))LW7`kjH/%+qn<O3#UM?%%9WQ;Sg][q?J+RuSa)7tR-QU_:>EK(!Ut'^iqGKH!$[XQm\<XhS5"G1q_:L\jLT/`0/R$MXN(#GT*slS:ilRP>eB%oW"X9I'rnOG%%h@FDpgu[?0YWGCRba^^<G!UgUcQb`3BED#P%u'F-pATJ+h>^hO<4XV]#!iR6lhUT-2;7OM2Qof_>3U-NT=Ze/Xk<h+#CEb2WT7rP%fdOMhrLqt)a-TKn/s'*XeTsUb@LY;`TV$KJC_qCNJIE\!riWF'CBCB&!85[/cD(r,>^^X]J7MJan<P.MLB7@)`p?[%o0&nr17]=m%A0G;D.(pl_-t<#>26pL?N><Y%9JHF9OuY&$PC-,^mFl:RqC6j2KH&eb$DNGJ0R%qbH]MWQoteN^X3c+(98S9il\_]:'#VlY;OX%D%<i"/#p81@R"Z;SsB;a58*LAd935u'e;oebW.(Up*TBX3!!W-o#YNEAaSt]_=Z[cHnT&4SQrNj$-T[*K]qDfORQ"&G2enMN3$-,#%%<t>l"`&]-I:,h;*HT9A>1M*ltXg_1$iB"Q>ks]Of@/SG[R*Q*+]Tg41`f$bDaG7uLb8_0D*Q^H%q)&0D-G>A"gVjp>j^Hs*Qdq:[%cI,?.Jts2L_=;035O/\*Wt9abs.T'`0L>=BjV)%*"(8Z>l"0*OiG==^AE["N!b=ON\=2U+)K\JU`l#-@:9jD]NiC5=g4D<_QmrlO%gTiPkNrqlY3>!BHcQ3SlN:aA*.<MRr-1f$m%1PR@8(d4u"m$=LmS^6bpUB':+Q!W=J+@M$c!p?&^&tJfli_kPkn@TK\trHuWGhE;%Yf;.3Z+FJKCL-Fo`/!s+XjM=84iIN3,aI4=>OUL>lm%5U)(r=le4Yf0V6<2`4euUq5T-0Lc5mt_m1rL3qp0Qer\9PINa-^J2t^i%%j<[oR(%VO=1F6<Afq9<3M^QiY#]_h@E#6mH#IdaTVs:lU\)mAOh+$oJk`m6eG%/G>:cO-!)bp%2-d`A5J1&cLqk#sZ4c;Td0VUM4%;D]SFP3*4Ue`8mnQG)1DcaAmNYf,@J0X$`bilgrd7,79F00l'j<t5oURXN-mg@MMocV/iWqA`bO=KYnF<$PFB1\B_&^>T"Vq"_n.%dsXWsB^];s]'N(.i;q6!AM1RkrDIJ07"]+4l.djtI]\"D,C?BHQ`=J[\7g3n[cG(K4#4jnA#4-A\3DnAL9c.\%6T9tr,VsuSGaVD%6Nn0h!:i<IHpPCG@^-+DOO#^K3%Y)/%uS7CY<0SC,/.n!MP%@"j$J62LBki]/p!e_PHbi5TliXpG<'P:dc[5o3d6u@SRqQe'@QJQ%0KTPOVt'B\l/ZYUI-k/Q5LU^rdZZNF2:45Y2;P<ch1'5$`kBP$:s@!3R_+7QI*n&]UlJ4V/ibs,==XSI%s"Lm:/'PQ\+.0,Gs)7f%/?9*]gZismOF-A\$earBFm"iMaeb2RS9:0'j=>Ra5A?DoMK8h<d)=[Cg!#)uc))i:GFY")*i6f.,C$>@MlqA4B.CN=7OSM,iV@]i%8?>e,^AL+\2me9J5uEq[-r#1#h!qeA^&P/e#hVYal(XQTl,9orMm!0?SARR6@B2L?-sJ?n\GkQV)Q`os=?co`pP-e]o_+uA>2i(n%<%f',lJ$,UN4$g)KCDY*%X>8KPQ/?Zig9K&H4.sKi!F[$qfE,9*#A`ZXe%(meu')G;4la!"J3hD5:XKii%-tGI[_-<a4#\F_kt7b%G/J!3kHS:e4D&a+;;rDQ*/H!T/%\pFS]@ot`UJLdZ#UPC^r8hPEXoO+s"r3?m[$9gSHfj6^*"Hd=Hj<P:oLUSl2dQhbJQe9i=nN4%IfQ[Nns-h_o.5RJa+N`pd:A`27F_j!?_&H.7;<Tb&ruCi;N?g1>pDd(09:]H@79"q9\n,DD3\n3;O\cEaRM[NJlm@[nb0U(CXBT6%NH:^8lVW3'B.5nR+n2)%DWX((JgIPf#!>JWJaMQAZ"&/5q+f1#M!LfU`>k5JJZ1i3;S+[FMqRCV8*q98,DT$U)6)'*%e7Q4ia"q_%:S1Agl@@E1bn%e[%LseLND'@i/r5VndMFj1pufImRjjbW33S(9r,=Xk0Epr,NtH!9<GGA9H_^nM5SW8a\RAE']+Wk3Z\HWYN,/#o%m..'LH:igDL,E[Pn0koFp6P1TO\B.d/u<HcAnU/%H;h_4o)@hHmOj1[?\7\R=a0r0TWq,r]\"oqK28cP:l8TI7=fu-EMn7Uk9,Ll%4"t\8@5Y>DW/^b;4W'L&U^q>IG&&aT8;)I"(T$a/2CQtJfi)'UNh@uOPR^(4i<G09/s?2#b^nd#Wh%<$_k[8n;Aa#ba)3>mWm'U=%lT8D_S]:++o\K7X?cq_a_jkY^jN'hUhq3iT3r-9;)7AQMQYK7+KLrrdpZ]7l"^c1Am=-aaWEJnS,K1quL:/gqRDp$WId$DUptN:>%Ejc?LI_2P&h"b$e5qf);M?D.TI3'6p7h3gc\$7Kc9/eUM8&<DPC+m$PF/aCn$TWllM7p\ENMJZqk]DLT]@ZqEG[.0_HI&-6'Obii%&$FTpin<#$QF9q4ILZ4[Ec\^Sh1**?[o9r";G?GT%9iaF!&jRmP.MV&%gF?8I*BmQO'BT0;\n#74$TuJW9UPaeWX*b?]9@ukZKkr%G'RN^+LZOZ$V*FD&k#$JTCP:YX`1&4T/>)ol6JfZc'4m\C,^I+'t9(qli81!=qGU6ireej-Tc6d4h7!FFP?Brdu7PnLN0n3H$joX%_7Ik^H8\ReEq.^aPWrIj4`oCe&'%00;68(%Kch2$6=1.f=5u(SIt36f$fsj[mS))H#)I3A2n":U)%-Q!HZ3<K(-oZ)&CfG,6@UKV%fL)fj-e<FoV$G\W)U/-V_2trj<;q+B'/cIq3U5O36KCNhZ1<5HojX_hC`gS6BDGd^G(SZ>p0fRU<],ZRNq2Jp-lu\$S>gltGBm4X%gSN^1U'"mjl$<_rKClh6Hl.?!oU7=Z"j<b7\6jQ/m+m60M)QusIgC7bcX2QaWKgh,@@+n'rGeegK_bOk38><?-eD30M4:j!f3n@!%bBq%M4&;\t,Lt%[%r@b<rVg$&S#[?<&`MoSH$fn&E<q/s"55`+"sn9qo$YYh%Z@Oh`\tYH)B9aJK?a5#"2S:[HJ)'+GVUg4QqT]_%>eb*A6YC[dCXL[2CeW(1O9ZRYc-SuN-XUW=9>%DF%3n(\a._5'$#;Ccns%-S'bhn!<6(AIacr59?a8DM3,hms#e_ua(g`)tJPSm.%:PJcH[XW=#]b*#\G:f2?<*!6l?o:AWS5NWpI;nep0Ye'aWu!PGYF^ain`fd]krbC=WJeb]L?c*CqksjpmWKs>l+>C8::g<&0f!-;%7="^I>HZgucOl3;H_cpO):,u2nRq!K@t<hl>]-$\8`u#j]K[9+3TC?rp6Q0%oSXlOf*S*[Ie#>ukX-re1ESg[8%)Nk[#6!q+(Fm;%^6PLWdIV&D\2S'J08;QucEQ#TC[DpeYg4BBkBZP9.YI$[c!_8Gr(#I>-@0n]oE&I0H5MGcpE7`l7#qNWJY5E'"_,0K>P)Pg_:I'(%j)>XlB'df#*go+(r&CFN+/d-bYE\A]9%3^4'KrW_'[KMU\*DH%+H`2a<IWRMr=kmH4@D]M.\@"_O/'DOr5St^/"U=5A+4+m%c'pq%iPhi!*eb+=_@pLXLCI!J3Bs*@aM3t-en3A[=6rl-a+:15nHJS':1'I9*)%TbL`TOt]A/@5SZA-S.a4XWd=OS56`RKI.$A!4B91Nn%E:KGjEjm34ipTbGhMadC`,.5s#eW]h&@RqDTW`RtYh0E-?aGBah4Pk=f:Vl04t&U-W=N3H#rg*g@l`a(og%7@>342Kgq\6_K.W2\%g"t#!@Pud%iZk]AC@0fh=:IlfWT+)M6&"]seGa)a*u$]&>dq]\<NbMg/IB'iSn*G>rUUuO5qC^MRdHc^i8/1-41?I(h=RPgS>&<e%bH&5I^]sW1*k]LPQe"""F/04j[C6D,@U)p9/lm^O:cabTQ&L@0:1*Ho2`?;#hYFcY2eb.J00"B<f.Zc)9nS>FceCVK5n=%Ukq!L=%=V#g)^2]4I=ptr,$^ug@m2\&tRmHjVGV:^MX9[i*%B>qq0!#6\*nr/g`LWK:k0e"I<;H3pCbr#o*?:$`$[..\WClO;*Y4-Qbf!*g%.^pdZ`.mBRcF7<(b+O`=a<WU_(Ymu-4D<tj:t>l*Fd[8G#?4EVdqICTd\'TSX@fKP1!d6#r7&(k<7hrkSam^@e/'qNMZtb2kE4B'%oq3ZsRI&Ptil6#cg\j:dC/A7K%soYZZBWmE@F40sFo*6:Z6&Y>.U>/$KgV/YhX?H8GYhqiQKNSK]2nR-`Lmt2rbQU_4_TfahNbDP%LSd@72?==M3SgtenGR]FCMl)p-1u5)<jWq?r2B8eG5_:&$X1jKol>"\46Taun!%YnI7[;>ZXMWG.#]>\Hgruh^.bG,b<b#]iZm2D%Vnq,$^h1s5*EDBST>E!WF%orY[fY77GR4T!r0W1MnLhO+K=9F:8SGt:[:TOPb3U.&Wd%>sMDEd%ob#=,d%IWi9Cr/UZV-q)f4!%D%l&p<2miEs2cB"`tR0LINLU!`[_r_p1M,>#-VR*n0!#d]!ChZZ(l:_S,e"G+elBWP'H;'sMnXt+@72<fhgr0L>PhjFqcA[DD9W-.d%#RsCoB0+:/A!MO>"(prDIqA0nQ1D/Il\(,1>@Zom/t4f!q(<MlF7jGFD4IkZg:4#pn+ES*/&q>!!=LOHhX5s[/ah=TKf.MB(4s]X%01fEs0LCYG=7Mjk;PppW;/bdJp8N:ZP'O<\RURI"+24EHo3V$*ch;(5fmRVi5-77Da,L#I6nrrC]):?mIJ\&ch5]0k9iZD<#Br!"%l0$o!HAQ*TdJj-3nsnRZQsegZ:2`Y2:[a3=e]Y=Eq@IHh""M9kT"bsqLUKuCJoBY/mF/97eYK30?)$!0T#k?o^AU2C+2->j"ba)R%H)mhu`IaurGP#SGG'h`MXk>kn%IB\!6u8K]Ep#$rSmo=0bjcHcpG<[oG/>,dVgOaZ*CeO=B0uK-WN8STf<\uKGp.08H<U?I6umHH%H]ak/eJU8/`>!sfa%tA]ni7Mu5mlj[Nq`tO8:g'm4VuVP0/t4EZgp3H&=P?F*BC8R"QH?D#)Xqskaqtf/d&B<9`b4aJATMN/UE[>%N&"`2-El^Zkn^ULGSO;]!?I[Km/GBj]8'le3S]24N0'suH"s\kJ`PhmLH@3HkCGPJG-ZVM$A36N.\U5tDG\pFTI@S$FKZ!n9b&Xh%Dr49Dcdm_hN@3IH_$#26-G*%`99h^pDJ]VI#.&/*BSRRl]A:j>"`HMGOhW4)g=b<<ed%a_pS8aF:tA%kUS")qD5NSl@F/s\+&qqd%FpnL;A8DLiZ%L;o&5>LPn7FO+p;S&T[W;TRcT(ef;=%[P.#K!j]%o<jocT?8)RQqc4"0emX9MZ]5OqA1L/jMelL=S8Z4Q!3;s2n.%^UM2VLm3=WT#13I>Nt\+'dDO6peK3PH'n1r%_n\FY*Q]p#^mr_g^pHbU[hlo.$rcEX@_F!/l57Ak@bLne<Nj;bsEFF_?Ub1[lb10%&4c!Mc54L[-s_*NK&UO2d)`:S25/ui8jVR2f_JVe!'AQ)1`'O%;`gNEJoW5+M@HW"I'P+7KA&OKUqa#WZ7`Q175RVjS?A;0",--i%WV#Jr/lD\-Le8]@k?$.f0nZN4,6:BY;l>!sM#TaLq-ZP2&F[e5%FQW480MgCJ9B1Jbhb'sU??;+]MqqJ,\LF"q(k]b2%+%gFS(WG%]H!,>b\o/m@=CE95HZM]]B-bUgY2QLVYMZ)^W][8qVF4DbPV-q:&M!Ra)$Uo!/us!^WIUbh<.P7rV/$+b@$HDcDnPTX@%8bmbf!H%RHUfWbDMNsnk\LKYF7c#>q@KJoM0X6ot6QK9?VWX4hg"t4'IWlbK5toTSBb'J@i,PZ)6>]8L(D_Q-8s@8hp,`Km%LbFd[E4Ged?s%gIW^:k#kH]Z*hm,J<SCAf]2l*\JqLuB=eH<)]M2&;;55&F-6KbXqJ@hl7_Dq&r^iqroJfT:'TR+@.9;o65)_LcTf:YJDOe`Asm*A%]",.K23C>9Pq*H$ZFA8qEV*)h*0$.dCtP&;MtH;Mm%c8.pgXN=CR/%g4%ihJ>E9.lp2/B$RuZ=P1%`e5Ph9bR@LLPAU!fA#Eb]b>%(0&VN02"(Ec_L_9@$fI`8d&HSQ[-Qum[%AT>;J?qbu3!f0"L%s3@m`Y.VGjm9@BfLH!t#ZcQG*ofgh0kQ$c'71O(_%F%<P^YHBPB%^:k=MPNk3cP:la'MQWpqLiko4%Bfk+oA`bR>BtLhi8_eQ"-bX/D@%V+l*U-$\T-@=KIGa*Z1,>R^*"O_Ed#R<asRb$EqO8Q9(l[o%#'N(3#qnt,>@9pQo(u"QeZUeV)l&e.=8,@F]h^RX0r%3BEKUuF*p,h[/d8ELUY4AX0uBfF6UA\K\VCf`#+EXup&Z;jCEtPUkLNNk%5Mk+]<9>9PG#f!8jkX/Ll5\8c2(RBgYKnG9)I'g[K+AW41f"FD>;OI*_1K()=LD-9KY5s4U*JYT`%rR27cFb)/m?%(+pQqfZ1BPQ%B]:60VT:G`pb5/NeZGRqp%&MF\\+c<VmpYeGg,KTQ&sVZ6GqshnU,&)!Gmo;i!BT-Hl,NL@3ZmBDJk5eP0Y`/!_@13XT4Hk6mD@d%&$D9KZ^m_B!cX1omH:sfP/[^0c^s>Y^4IBWg3N6r-g7T?ZbaO+R&W-D9<Y[ZQ"KLhXTKZ7QlNWNa0'%2&?1mm2p9-C9uQFUKa$8<%X^!'9;8h.YoH7i^n5EW.eZ?/ieEri5!j:AMQ6C7j-(LE&Z=[pcV.?j5r&uuan2<S;HV,'N[V%HT7J8mA8P[[$L@`sE)i!_C0n$Ve%RcRo;I=MiW(t4/F4c<;eA@AJ?GonOep3hh,L)XpiI1TQ:F+#B8@#4$+e.Ff_18,,`>_C.d#/%8MZRZK4i$FeI_(2g0k=hM9pJlZ.%]?GCo\!>P>GkHaCj#_8,Q6Udn<=IiSfb"-T?8C,@&#=C0o<Tb'8*oekcUL^Ub]_<\6<Zk+^cP#\pDX9THl(j<rn&k1oBmbn0,lrt%:HWAf*Kr/BAr!I9=iF<+RoOgrq$f/2B_0(LmNHBIa2j+pk.K5I4l/5(4+&6hlP:`GF3h=!AQu9Y1'7/"i?NU[KLXjnE7E!)]S]e8%X3$RuQouF!+Sf5Xd.u`[,uDV$@])PJiq!T!QoeTumMY@T#%lL2>Rd&T/WRs[@Ne*M$BcEWaOO..]Va$_pun^f9%G[s@d(Y`+CIlP%jZPdH-N]hANHcWniI6q.:#fba.Zs6,057fH^jZC3K17*;"UL=j=]_BS=_T^&o]f_Wh6!L#jOL^IV%Bm(2;8#](L2=A'sF(47e8&*%!,!=3VT(8+cMAFg6!8^+'uP%D%>s77g+H,uQQ48-/MEMjP)S0W1hGGVGfi<*rOaGp4A35)e@(JK=L87'E:_**4gP42q;pC7ai\sX%?IUM+]+;De#"p7XhKpiUIJNsNo=ZT=`]GEGM_hH'ktmQg'O)VGE)q,K/YSg>&-d(N[r>RSC7dFEb=@UU]As1La1sU!X%)]=lF'O>%A'c.ON.2B.r/LN&_!2Nhj2:08/0^k!"RL@3]bMqPb50]Yji?$iHF%'oe^d<+OfQ72Iug:*fYUXj(l%)7hciB$<cP-Y<k!gl$g*sT%?I9\Nn:0+,66!4aKK&mWCR>F=SAXo#*2Kj1s81;S8OuaJB5\Y45AhfL/V?Bqm6U>jOmY_PfsWqWm6EC%md>*XBYhfY:r8Ed47&OS%J=cL,SKjFU=!!CNR8EIi&bsk8NHgj#;]u`3#AMPNoFtAQ0MG1>Z*RQqjI.7K#L(Eh!&gYF+C)&%k"aYT@.&A#WdSkI:_1@oSc,nK%-8Hi30l]&e_ltq)>fl_n""0Rhfa)rBnaNZ3,Db.Y-_rkFKL5sbOG,dUcUX:`KsCom?>e='`(/GJJ_9p*.1jh1Dl@QVjBP"6$Z;hr%cFJN:<t&r=L<d>]c5580%@qPDSZ,f^f/7Zq'm.1JAnpP"/*Lrj[t,GYk6a9Jm>_Y*cn,]AW1[@p(Aq_QST=t*?Mh0;%@qPD*Eg:l%:(<cZS6B"@3FkZ]WhFL:TJPYm*=jDWPeCAiQ(<P6o,2fM8g)m+/fmh5U=Z.:_<m&fo"_R,aJh0hp6s)VRU]RFjFF^5mrQlim=2`i%aFc>kf_@=pp*0cb2:dY"2Ep2u(ejdhm_.%?#A"Xb+CNLXYe8:8Y+L9S4%\UTI\t>S"\Lt>[B'0r>G?I0a\_fsP.>V-PB4j9;T\$d%48-Us-/51;`fn;X"]Y)#*X,](psr"US#<,P[#V'6>c&:op6o&Q[A*B6DG,aN<_X">MBgMQ2q*\Bh;#JVHle1$]Yp_n21TocqnjQ=%5f>Ac.G<9balejN!&G\4U6g(?>0N%3jeFc*eL\=L^Y8n)b@c1;/:0BDl(u>*\TLZ:FRg?T4V5eF00>I1aVb`7e<tI=E0-NUdNn>M%SP(u%k8gU\PM>2""\*gB\.6a5mIFN&[r=D2^HrrJbIRU`)lKcZ5M<b-c+XJ'CMBJg#(H$F[r$n"euD-eIf3Nt^jFA/Ft1K?VT\fr%fC>]7DDa0*QiYG8!S^_1kgZV#`jfZd$F!MihMkuF2)E"EQtr+gpISP:$=O*qRAsojO,^[>BRSF>G"2)D]K+V;3F<_62d(A\Ds:R]%B*lET?srdV&[Ltiq-`&moZr;fFB;NNp2HsC].;U;H4KXb!LV.\rW7c-Vc!)/QF!>e1i]^kF^:\bb2'e1/rd8@TFs2e8Huf:&lkd=%#&u0DaN7=o9+E>q"X`=(aV/e`QFV"1+.8NK*T[eHkGs9(p72&'Z<DRpYrp=:@`Y?flmngm[aogpJ*^]gM7</u^.q^%n(<u[R84Cm%RSH#lR0Miue^qp#)&XBX^`*NSR$IHp*[NmV[^0EQFQ-=ka\'H!AT>J\P;+;G:pLF_r9sCE7PZ`sVMra&:8rdl]X(L*#"RZ2jZ,Dj%`9p)M18gU$5m.0Sc;X=[/43Vp,GS3GY()0:Q(clCA;h8&DY8;10/G@O#6&_@nf4Re*)rYF&3)aHp3(fo?-kkTS`MZ6ZYXc%gl&M_%*oBDq=(2@a%5U$AAQ$RC>\hY/&$o/3#H!dn3D[o_V$q5."754[r*@\KRoV&(O#_SHN2RM6X/fIb]4#HmL[45+5-MH.6:&fCdA9HD%pE\sjj%$+#V:Xp8RZH`>/aoL0[Zq;mAc,HYF?Q."Sq"*>E*g:D[U)+eIL;OFM#2=cKhX_cb&nK7WeXeBf8&=$\/oP$C-f&rE'Dkt%Y"dE`&bX4573!I2)l\UVo.]<a\4tSmfmG)R_t@t4bDNgSeAI\a0tV9C<6;RdA\D>%[NSEJ!OFp&C%O!jS;Fm#HTDi)-Mt+M]<3)L%0HH8MD)FA/'D%*@r=3aSq*Vs4`F^?[>`L0L9P<9h:H[[s3r=St;`TE??YM^o]_<(B3q9lWj0B6)H`O#[cf=sN`3:sN$),<SV`fq]%!;#tg):pN<+^h@/iK?-[kl'7\O^PQ@Hjpq1q5sE/lB)+-Q[3IlCs8drIdsP0K(C@@D8)lYGKbC/PJF>.S$L40bB83;kgC><<.)+o%;Qh-<U\nJ>'7*@L['6[%ZU.)qF6hXL&ZNg.eE0eI[?Q5r]C<%mMU[ubbuCJ_39sYAU3a(=<2:]tS#AkHE4gT'g,>e(kEN3$fRG`#%j[2Mr\1WHQ.$'i1_rXcU;NIq`XlI)/NppHDnq.l0KelPA@th)J;Rf`uQ:?aW/VS8*.lU?5LX05]gRm9U9IZKt<H,,u?)&*ob`@$2%G)$EsllAIZ0>]eQjJ;qkX4Gf=rNS]+,qSV5cjPEah'hDCJW,,)q6HP=+(ja^_nY#4G\l:Y.kb*d:1*/f<UODg0!>TM_VRD:lt-%E%\$tD!7!<Z=DE%:M>N90nj!ebo0??8elrAf7c1g4@B2L.VGHu/KqU&:lS"/p^b4T8L;1'iPlFpZrWAMl^W^?ZkOAE4kKm`G">siQm%;9_sWBLH"F3#QM:*3.9o!mgWo:7Ji$e90o2A1qGtgOB%jS4l*[KCZ]Hn/sEnX0CV&O&!Z3SYYYGpeksu5uE=V\lQFW=7#Y>0PDc(%-3c?Z@V)8iD,>EO5/,'DD;V2nCb+RGlp`@=#=\CWm=3kjfEp<e5JlF!Y1W-pl/oEmk6eh@]l#pqDGBD=lir`Fn)M$/[%/^I\p1C1%%%=3aN7e)Q]0WW['m=h%6!tE1n1TLE1J=ceh/D2]*u[Qhqk`E]+r@tVq^JDK-<N7%Wo00Z6YoL,dAp46fY`hUUB__YkrV;%h7qYa%Y>[rd.b*XUq[$8Do$[LYX.PYRZ9<748@]a9oiU;\hQP+jX'aX-B8)LeKd<kf9laRHE6gu)1XmK1A2*TrcLlIt7*\.8DN.<M>j&$B%qrW(TLtDI5h_j>[k\g-RQr(*3.X8Hfc8/)@guW->bN#b+?U/7hl!:K]DO!?.n#P\HXuie_1K&$&eT=hje+U^=<_[3A_TMGTa_El;%$*@8(kbX`n.MklajNUZQ=e4=lEoS+=VXs_>OL;+Q<jKf]Y,8P*V=U"\?DX+9H=pd;eT=j"FH1!\IT9*TjVV0mm9-KYcDm2Uq7@!K%WM["BDL<D,VR&V2BO<Yp9kRI!BD.S@YGSXH:5M[5L8sL>ekbmG2HEOb<D0g@%^/SaSJ<O`op%%.e%&=l1Y$SJ[<1_3bgeFiVUug;%FB7-E9/dY#P4cG%3Wf@.<D65*6e-9Z[<.9phI&43m2>\Y<n#_jYFDYkZ_@`N-Z?A\cHa.?[[PL!(hbj:Zdj0KQ!Bf]VR(;7:&"0L%/iV1h#CsaQX%EtO^R/5.[DtTp@fU2<].^Z\iR<jWY`m!QZT6%;Cc69?SV!$`[Q;SobZabk=n/E9`QJI]U3jYNPMmc4Wl]@*/3L4g%brrFgWb6OOS?Js!7EP7H3U9=O=%A*,#J2UZghr`ABc&4n*:ofR.T;=^ZjL^IFCpDdfU_ZQjnt7-bT+4VDZ/$\?EUif^8^,OP-9)S%S`t;Xl\k13S!q;RG8BpS\e`_>3[!C/52#4q]AK]T+fB+*bD]qsC;juVCbgmfMsf@qNjrD:kD>DS^?3_7p<D@SdH#*Ghmm3WmqCke%WqSQ4Z],u&R[dM$!+)pr#GuY]?9O3]g>tU:e?*]`d$d0r)4e%2a<IeZ<(OLPM.TCbH00@-_u%,qg7^m;GGNqPd"j_(MI:i*nnYsJ%X89*7B<EUK+&2E9khPpO.TbMC(NuML?CUC9kJ9<RL&t2SkJo]WL&tah:3=,;=97a%%9,Nk)^1Z_r"b;[9s"oE(NbA;in^b<:p<]$%>66N;%[HBKV6Ga8B"+fWee7/c/IH937qTr"g,A\*5QkmZ(E$^fOYU/.V?pI)et#BHF5O%I)=#:`7#rhfS5)mb7,iB&W280T,F'_?%0-C5:P>FQq(1)A]0,9uGi6&qB=5@Eem["_i)]0#a5-F?Li9T,;$Q2(p<o[uRf)J?m$tnDNWb!U%=)7%tP,D1^K7J2"AFQh@)ie*X%iVcB&$k=/"I)k%i$G.qR/ghjUMkT1/MH@F!qR8E=/QY,R5R`us\6J!j]G9^gS8QJR6OZO7+G:]E.F7[A4.jRiOS*M$>JBRVGfQ@U%Ms'@tHi'g'Wd\-dYkI2!b0Bb<G=N7L<SSS<agR5TbKnmr[><Q7Ah"nK?-8kSI-1jS=\EZ_hhXO:eiog]Tid%FbH[Eb*;`oAgEIuh%:L751pb1sfXYup$mTV"P>8"hIaCQMW(,7s]+gfd0en%PK,rp=-Dt]NM+b+<^1+"hLQe\Q?fP\/NR?4=oNgCre9ZW]&HF\]Emr2h+%6ECr(55qjDad=/;[jO5&0s0FP53gP)AQE74)V9XrA(]-K6i4&FH)kp:,j`k1l)I#IhM%FfDU!WUh4pf2f%Ac#Nt"7#m!PFZQQ"J1%LJLioojM%1?XEK:F:K(QHELQ6\pOq(U$C=E`YD>@a:Ug`eA=<r)'H9t2:6_4eb)9EDq2aOEBk?2ajZ%)[WHh"4HA:L&'#bh_&%d^%Pq0DVn+!70@J5_iMR*8;;nGHc=SZMV_RheA+U9mS_p,XY)cqdLL$9Ye9]<Nj;\'\Q0>a224u0LqTKk6B8rSY[ec#m045s!0eZK2H%`MrEH_A[^D=Sl1QI_)j+FRQ#jkh=k1(:G\eo*#j1?h$NQS>e>^[O:M.pB\(%.`ZMlpj$Osc(07B*2/RUAU$rHg-;TbG&V"KW3@<'%/rCaJ61q7b`k+V*?Y)a3+1-(%rF@]tWeq07F_thF_n0p"8+>m%IaD!WY&%@l*P<bK'uReC,0WL:0PTfdh2a-a*r5oV4sHDbLRuo;%G[AhC,g<g8R@R)iZc6N:nVOluJjZ,3Mjun963'F8_oCN*UAQlVcNbhg0%;qh05Rr9OP&1b3$#-,7;;RPWCX1r>%s2.h7MC3RD(oZ%l_@IWKWa^Y.\DJi;UOgX.bgdu@PJ_XG*O:c:/uKR#HN;VQ0**Re'(OZP9#0VT@6tlIV=u'hm-o\al/JM0=VWmY.(!)ULaAP;:39A%/^GhZW>^\!1DG5&cGl=&<U&Tn@T6DTgDogBGGYB,'+^_LG0.S7Pr;X%e;+?')WpeE8067'cFZ2WV7"'+Ma&&fIX\BZ@E[BBGHKap%CM/t'SjdJ$p1L%h^D1C](NYL<QG40tkp&E'*l`G<`+"Y4=oRN2#A+EDhH5`l/=SN@mruHB_4?4FV1a9Zo9OQ&'d/ekcbE)p:8XC5%X2=fd*?Z2pVX#5p2Ve8<GPGjd3Oi69g!Y9a^])MEVrG+Iaib]J.t-Tr&g_@$3YeRJZ)]g$5frSq^>b3U=pd7A=fIW!mu5na!kMZO%m!8Pqp\38>Ap^^9@J<h'k&uZC)3eu$1&s+5Q1ZQf>0GrSP'/pR^S7+]I6&lUXN%s+!*^oh[e1,M%A:@Dp"Lr]Y;Lh_h][!=!d&X_%D,."4<!DKaR&eF+jPNr<HE@5?"kT^ToND@\nJ3qXZ8YQ:JD/<GYGqT9ec:#sZEY^2`u75?YF9g;!q]Xu#bKH_<Ib:<ltZU-C;nQj%,&d$M5.;Ka2KL;hioCkZorbfRFX`rG<VV>&jg2[`D:=jBg$,cd?HPccn_bM%PY\t7q4G?bcgeHFNEs]iE.?t1Qgu"k1=mfi5GNf"%E@VL,fVi,feaL!)L,.ZPpWH13(%:g:^=@-hhhF2J`4)Gqn+H9m:20ZRrJhk9oipD0:lb;HH2feP3qrK5bieb<W3u'dF"V:GETIDm%olG</X\TM1I]qZ"FNIbcluG_!hWs@;P.hC]lfUAfbfLg6f?a7n5L29=\D6E54<`O<X`prj;3'l4<HIV^=ma,[k&3PhFfulYU?,VX%A.Nk^Hi:%khb`%/Id:%2GtSNlp]?_YHi9I%?/cRj>5.mXe@$"'hqZ8]JXZ=?hWne\75K5Th8e]$6cC2]?g1l]fC/<LjBb(L?jC7_%Wund8)n=Kq(.5]<rJ9p(XEC_=o2_Y,]rljgTC[VL74Qp'f?a!&opo?S[/RafcFiB4mR]CplfYq.AQ:8WRsY+"f$nZ>hcfdE7D-4D%0)+m]^=U^,<kf+"a6+X1hPrTkn+CbY+uYt"Q%"4dT9Ue-hs+i:e,0#hrL@g!qfPom9'8#"-l]\Jch.ZF)nFSHq,Y8\mc/@cSt>E2%gVC4a(:X/=p--4@MO:K[hQVB.A$rB4bd[F/A?Ju3U5m-nIZB\S/)9I"RAr*QHi9Jj*!;8(ENe7T?7jVBFFOt8R.'_FA_l[0p\Hm8%R112W=+>pNrLBR+]T7!U@X-uB+\m0iX49=8hWhT(\'sa5p!ZC8][b=_"2D^dIPu'DBuMuLYFdU"jjWJ[hs3d/bT^l4qC^QAme'dA%DeZ$"3]0\;MnG1!rL@g!>Oh?YmCdtoNhJb"R9d]Fme(XE%'=[cIrhfco<!K84!Uf^lfWYrT22l]CYnC?HlgqC\ouVNrL@g!o<O_D%j^(17%@j9[=r[9Z]@YB^3*9."rp!fS46)E%4BSA(G]MO3\@cn^LoHism?t_fLi"HFg8B+b&)Neu((K"11.>"L9</gjS.N&+S2OrW%OF[[oYtc,cGps%<4YI5+BPfYu1:(9eN68+Q(l1@_lqkgEJLG_/oi-L5o:qKP'cI7=mH4er:4&o#UZ$"bqCWD<Iu!dh5C'9_]uY'j%/Fl-cV:f;9f1.a?VtR1'kEeClr6M&+/Fj+MSN8Dg-@EY9`&,9].bmPnAoMtL\NL`MH?JJ(s1&Y3T0!Ro0N\2+Wo'<U1;eabZ#gs(%rOe%Q_.e'<>Qc*#Nq[_L:dkY=5+e?u(VT3KDYt\inA=2-cD/#Jm6/Z>&Uhh,R-r:KoRPc@;W[gZSgo5u:T95UHS_4AUdNU6lJZ9^%r?em`I-^T#.g<"E&!QO="C"N;WF^!Tam&/'N%USmDsJ=[R-?KXQgR)ghUB%/o`U[]m0ZC+TB,!a%RtKlg8Pgl0JQtHoA/Yqh$N#-%qLWm3m=h!Udae'i;uLBB1ej9[)6UU(*d.T*<(VD9(5E)0YmGW*cE!LsE(sda=0C/-e;i%0[]?\/bJk3ZG6LpW.M,$iHG5Z3)Q5MD%3ZJIB_P6g)Q6,ShRD*(f[;tje>SK5'g#W(h1n1"Xp<2^f_,]_CbJ"#17Rra&rSpPR.KioTkPdsT.pnndU8%f&Pqk8SZMV&F'[J9'%4g*%MB+GOAdF.u'eJCWg@DZ*`"=i,ba^P,[hjEEEM+Z&\kVU0R>h6hb5-_$bU-gna$oAPdn>@,><PP2G:+#Jn@1</B<pY*hiYT=j%:gYb$b9c:5"^nB1Zks0'b+\+B#p%dd]rQs\KujSaGuK&$,p1X2D=%AHNtIH06qM`i,Tf\e?0qYe4K.=j:j'TCKP\7.[FEJ<1&Sg'%<$$1mNqOlPD`FPn4';oYKH7WB0=0jC%@UrmTW?*lkg+#WG,lQNPeE+!?.qAL7aYN:/0&-&4Pc#>d\p(WeLc3umGejJ[VH%_qt^eT%77F<`gPF]`<*P=+dLHqNF3+6^a7V`dn8WUnNO"VR]5N)5r%QNXjK@4/[Gok2i)XJ^D-NZ@$sZML3I)rV/Ka0fXl-1hER,3"CPNhH%4?pU7OXdP1WG_-IZ-t?hFfm,L.iS"4k$I1mnHRipU#/Pl<3l&6WpEaKLoD2O7?(Fkig>6in[a6ei'UCRqZhZ-H:<%a4j](ub<KBM%0LifZH-ZQlk%#%"rGM`9Hr;*$\+.="-.TJs..%heD<P)<?cD/a,p*g+42,+%4nqTIah\cHcc'R3NM^jMTOp#4i2UC:6*+b(R`W3K%N^KXur:t%j4Ii.7I\E2`;2P.TRPE^J]-hZI,aZATF:G;"]c*qs(bh.NR3hHcD_md2<[-5S]%U_>dbf,'$70<,F@!IqPLDKS$%Hu(%>STr!?F&e@9GAc=lNla7R'uiEnA[VFH*!IMD@ek.P/)W1?$T)9^q?,C8\n@TN?NM&F:)]9&3;B=6cZ.QLScZMc!OT@@YN`.62;pe%oc+<,DLUNiP9e,Vc4I\8&k8uj'i,@['Qgm]2'r/I095CG<":-tIX!I];7sWK(4^*A8\U:3N35i08^AA"_d:KdCKUi.C0&4@:(NOq%\skrV>C9=mVJmKSe\@tB_,1e*:SX_*`rHU0D\_/-#''2H9,KteNpbaKa:l4S,KK)pnG*4?g"M1he3`l2G+Y.#_SMJ-NIskAJ1l_i%?S@%6(dM&EX/)p(X;aUc!Dp9aG/9iG:7uU.)F_CR>$DWKi>UPt&Eh^5&$h*lR0A+jT*WST*XB8*qEoBV%N3fp!*>u(F7THFP,jsg%8k'me`jn9$'DY!'l%!$>O7#\2GAmf6K8/_uagY7\mk./W)pEu@0)>!><;iOYoej#IFU.\3b:mTRmZSr=q-sqMALjVp.p`]"?]S@:%\snJYa@=JGQAQ.Ajbnpi!adYP4Cqa8V`-FVKF:SH2jFZah'<SO8XW8(2j+;;pKAfXP>21HMttM5&7%4=1_23\'!T\L3^o9O]Zs[e%E_mkZi\>"94:i[0MpGm@S1Mc-R-#@6c?u:W*6+VHa0MrUkX5\qZfbVR#`fICJ<&$U<.$DT'&kW!+RmF&X[.13J0Vf*nN%fR0,$Ch%K=ig3&qMgFlf%=s-)C*U+BgQ3@ZBiX[fmr"f>OAld'_sgR;*T.b*C*cFdD^LrFdMA?BX]VL<`\81<!8unM46K_d'n0-n2@#ERgMH%!2pV'4q25g\f-\O!l/g7B5FMm5.^$]a])>oKbXTTMg#`mJ3,23"^LY-Y,5DQLrQn6JuYD$g>l(i(QEVW"L_;*[;&6>2;T]!ASI=J%'U.`h<Xm0`^+8eWUGlCqE>erNl=rHD)8p3n]!rZ(X>0CL1i.,5Cg#_IGg*4eZs'M%]FI3eYuYeN"^T,V@)&3Q/TPV`?X;ZN(:j*J%.Br4[JV)&p$B'q>-jM8iHsTF6B2dI5nce^]L'W@!45V^Qp[IblKLu\[N<e?\p_6fin!=pg;[]1tHePZb*2uK8!HKlpC+P,5E+<oV%.0!F@,ihcuI5.^VMX9m3,d4!MNjt1*jt"sgKehqG9LOA\I/^V!Jbgc6diU;ka0d/b5rh4n5j8RI6&j;7OMb-T@2sLLOgWt5,obBK%7ugh'a7T]4IUm,m-'aEmjcVr]E`<OIPEe36_2_@BjufaG\10o:GN&=aP-;JYM5p[3,,.In=1&2!K"nksJ)4#C';j`\%f5co#0S(>%_1@kM9KS*8Osb(9i0D6U'^0s&)0;4]UTjP.S(a4c_OlOR:qk-a;qiaq!)O%iAROX@,X%0)ga&.@<uZd:8*LitGDDSQmV[7KUX0\#%-G[argundDH^`&@8)@eU%C[FegeF?io2+NE[V@k(1o\c<!ke'SNLXKIB5PNVYNFDa*1p6`7RY"NaM7:AC_c>O1k:i$:@KoJBj4ja%bDVO3);HM<7"s3t06)N5$d$/P4,$$*RmE5]Up:.+g`<GV\t#3AHfC=$4Ason9N`glK@;rsi'3aq_6PY*iVpY]&(W&Bao?1O#H)j3%g'"lQ:[W^nI%i#e$/V<6;JGo%nn'V@VO,b\[m0H(I/CWgmY%J+7\+OE.S4dI5P*mE^%dm_F+;3%bhX%0:/ZI:C6(H>++K!1rt%%.%*`Z$8jG2NW1Xt^43SED)\h^4%h]+P4T2aj,&3F]f_JJm!&5V`MTRF,@_*K1ld:\#4n*:bf=dG&-]L-?-iR&0D7No'CPc"7F.=,<I%0]f0O=Nq@\V4ZaGR7DT@<Bc%!7bW47Ip=\:i`Yt7#(O)AC46D)ar%QPM6/l*S\Fo;+FJ.ETkW:,XG\d!SRO&dLkW0<e9W$h?>j*P%U@#l&H>jj[kL`NPG5bSQ7"2R14Z@jgl<`Ng-,5kH,!WY^/AGs>*`li&Kg'bqN/i%m7lZp;BNHHNk\X%WP5%gp/h<aqqNA'k$nHL?%mg%[$;2m&TAjV:je[WKLkVF"^LsN]W>SYEq_HN)Qj%'UE&',V.*CbkjKZ6#%`!MFp8no=W*Ps/km!!O9"-^MC[0*^$=@?WZ8jQL^%nda4i3HjL0JMnGkTJ0]H=B0nUqZ=7)E^SkOg#K[Er-=RX@D==mkc0T\49DNRb%#<VHdX@U'44C`ZFtpf]t-n[Fu'*mZNG^6dB[2F%FnF3?RlnG+TP]4*Ph;CdNBj89>Oi;I'[6)C5d=e(H*Ee&NqVn`#:8erfLhAe)Cpm#jA@/p]TKWYSd#Tn"Wa<P4Lqo@1IUo:^)1>S%1j,?a<Q`uXWEq^O*!T@mqFGCk/e#9d`e9-9gBr9bRN,`L$2/+>`as3>]-aYlUr)i-7uD37:;ZMdR9$C_l]!nsT.mKMXX8tO0$(dh%*!W)fmGK<DgIZK0#l]3N?)>@nV>be9$&_>6F+Xrq4Eq7<mk>Popcm&RjII1Kl%B,+56n>;eVp@/gsq@b/W3/h*8k<2kau?ff>N+b%Qe#n@dpn9(8a^%DV&JOgOYY`c.>$Y%J!iWC1pE="C=_F$SLFu!4ane:nT9n68LU`#asr&0NBQZbk'/8A@f/6D2g_qQh70b?M0F?p%JWWIA\$)=$2-G;eBmjY)oT..VkgZGToFa7OaBqK*r,gV5$A"u-H,_8-*T9!7$s#9$\q`l-)Nud78EsTM+)[(\FF<8IVsWN!8R#HS%9&TN=\U\1Mf(U/V5#L)LnB#8'Jij+<*._NO*O*!)-+tE3QB^6ND5Y<]Rq!3][lN0A1Xf)j+>=>NLn0^0,nO=WP2N?#FmIt)**M.H%M4a**D'kKbY_ET-@65%Emh@JV1s06RG6pZ$8V!JWNtkh[f99:cj'a0c\Mi,*\gq4$R-_jK8(];kD>-9)%9'>_:%g51&G[:cHsd]i%-iDuJi4,qP5QUC?k:[EAPW^#J"5/h'6_p]!VpGbIbnU(UA,"4^?dN[<+oKNS"I0,^ADM(d+>m"fOC\_2i;G6]"C+hPJM2iK)48-m%j[+X\b[@60+;-Mo+E"Td#!D$r>OBd#D.:`pg@o#3=*"o,C:8M?FQoAh7D'.#1(rGHF9h=^Kks&"!.\fSEI$R45q&R0:@`qe`Bb]4%X.e+\+VTat;Y`Bcp_^69=?Gl4+pU06*Y*C^Uo#_na&J[L=ir6rauf,dqC/l)$`t]1-J:k>F'&Zt.CM!foK9FNL-^B:e.RGTeNf-^%bQL2)R.k=MdIGb2S]N\%kg\<i9SFK..fd;VG7]r>j[r-\!EXXcjAXGC`,)JPbt#/\*meVO+(D0@r[4f>.t>rDl^K"n^Y2^VV/51[%i%`1rHC.^o/R_uC<I([ojl1&-:1]SCYHH#X?9qP7ZH:Y9e\G\FGhKFOYf8u-d8i4,O*MJ*em!)NM:Vd,4P#tJX"C7fL\?aA^RUlH%1-1to=Qc1\N7&IKQ3-Bl&bsQd:IA76TMP&m[YK?\6/1G7)a+$Ka't@TIlDWIf6G<eE;Xp4LOZ]f^<=QH2gG*6F0bK/h[LY+,q3Fe%rk$"a^V8X'+?CPBo`]2ns).>q04#I\j1cNqr2WKPdd^\F_nRTniE&YDi&$M#\+IumHE_5GHHUdnd=Z(hpL=0E6k<&aa=$K4&j>:T%4n8X&UE,]qd\oP$[ePG?BXsDj$abD._S>91DLYW$rfO'Ag5l5'iW#VOMJ5<"V#1YIUBV&_f35mb^=aQLVrPap'DC$I^>O>n2k:c^%m<O1DC/4g(1T9R.]QSKsoOn)Vmectp+@Wu]$h-!3G'`!Gd<?\ocb]WGrp?cJA[DG/N)VoWK-ou?AnBBY82F$iWa5Z)7'A_E8h3`#%m-]l\mE\LS/<#j`6GoX\8h`Au8dg(tOVZC[bJ=]dTQl,gJkjdZaMJI=&NQFP/ZacU9e\CWU]g^-dmn,Bnb<@g3/&G]d.Ff>o:PoP%?R^I0#(=/S$#)Sc!r+=;:/JSoqnIOf,pkU3A+d8KdDjN>8mlmWdpBFqdbjup72BR2'-BqgJ=ln<9sY.pjr#"oVUu$j_7NB%Q%02;%;$5/6Bg3!==WTHi#sk@`6Q19He,Fqp'G;+LVYr'8:,![2^b?t'8CO<*jk'\d!,.K\3;H\uLdEi'+'ntT$!uQk/Am;E,t0+^5SBM`%0K5Y<8d*kF)5VmsrFm2Hd]E!PN)T3HRV@M-)0/&1A/I-[]I%.4o$E:b9kbceo:c5\&J?d%6lP!_"IDmT(cha1;&bUR'4>?O&/1!F%#cN_T,q'?@&LO,@M'D@X;#h,$=FfY4"^Z&@i>'k^ED.8[MsqHh7PK1?V,M'Y*0X8>J;@kY2O.0HU,\MPTL3_`'V6Sf_\2HJ!q6mX%F]eo:!FDL!4<c^n2.2#f]Tt)WMUmq_EW5(=]n`G^rC%g@RK1cDSmYHH0W_jQ:8Bj;H9)5#):hTA>_5Qu/Nik1Yb2L1GVR#2*/.FP%7dEd*Lg0'G9r0R]JEg)@a9f'al'/t-kln4\5qfU<L^Z,X-"oc`Y;&.t=GR0['G;r$=I+Z;OrFB29/3XdC#pYVL_>7#1l]PR@F8M[%Bbj5BcX;!*3#W)FH4;)/D*4#TGnCmMVQl6Bji>fk@L`Pb:#Y2h=eo.fBeI6.=BoMD^kfd@^i'OJ'@XH59TeKL4HK^nV6p>ri&3bF%aD:nt6`4&jAJ**\MP4-7EO<aV>O[8:0u3_&AV^u'EYQLf)%itjE#BiUbWLkh."MIDjAH;M#,7db(nSVZ7-c>\=TY3l5`MV*`[np'%d3>fD%N#uV&8;tb:dm%^,uQ1"1"7_m!$e]se/c#S+SR)P8[1erj<6s:0.fgO_f;&OBPK(MM`OZF<YDMi)BP$08HC?9pLo,A'a>,1%JRN!3K;FmnOQJhYJkMr*('_0s&j`TA^W,6a":dg,Y9PFqJ]Arbnd=q19=2Lm2?=k/M+(#?A-R$'9U<S2M[(F]SAIIh'ZJ1_!dGZj%%m5SlZTnL%.h%A.LoIa4JM;RSBhQ;%bAA5SR0"U,A!'=`C,?P0:haYH0K!MjcnK1q/J0E3#.OfcDb='./>sfC_Xb"hUI!Ym[h.5s%ro%:B$hCmG,2mYJ9u?an<uS3U.*A:$JqPogNKcV'SkC4I$?Te,+?M#//oKSI?_ALF"d_Q%&LJb1U<9>U6ioUYekO>nO!Pg20F&$4%1Pg*\l,9rZ)aLEK^T93K&UFmG(JP_Y*SUQ0ZoKfZTT37'$6n>86%n=n.)^S=J@$FKim4M'3XbeBVrb=!Y^qA61kfnH<Op*r.n-5`%9riRABf_PQ-dlg7<>/bQ0\`BlH0mUgG"B>L&SMH&iAR("aJ(R),XJ"^&kF;$W%H9@\.'^<VpIJ6P\J]%[t'W,PK.\s$Shu$LN#Z$%:=cFIgc:`0(^JHlW<C_&D$sAa1`0?e*j@jQ,8s]MZU?<:!B$1/)QeMMcF6%k!-/-ui7RO,4W3=oE$/;6)IaaB,pEj)$oUotIde%j%*0#HDO`6u&BZ.XCfJ'N81l^i'/-=s\n5t4/_:rAj[Mj&DOIg#PjB7$4Af.=ROAc-2YZtQHJ:Gu]Sq>AldQf#jM0p/J%:IT!?>1lX%]F"4$V+'1Td@_@RK0XJ\$4%=V_F=h9ZtN8;BE9gYZP7ScTHDgePdq5C%Fe/RXcYq;K%Im_!sNf/=;Hl&fWZg!"i^[X9VdcT<nh@W%)^m?bhhEJ>0J)h:b_!9f>C\($4Qpng\J*=6Ua^R]6lVE.Sdg!Ei.2&/)\)MXO.`EG[*lek(P?OTiaPf39,l_TCkBm'h@"U*.7&_!%qAcR__s8mfMF8E'$fSnE*33RF6<@ct[E)l,&1EXi9$,_ID92<?&`%C.etXEu%Ic+E0$5(Jn67$=`jK,^?fWEgq9o7=f`1^H@Y/tS%5Y3jZX8n\971#@'eMaYS^b%=*CMg`DO0Qb6@cT8KOTBr-p1$pOaC)[Q(,:Mk=:dT*%cl50n6%FfE&s4iaN8%UEYX\T;-RE;_575N%;IhGfdXk"V6;,A__]]H\-A3%!!,OM;#UJ7,RM4-1gp@iN!X54Q#)`hoQGTl52WXS+?qu?7>%j5POV3c1`hl;&#hFb)BRs2d'KK%k%)B8o]iE>5?,%FA(SDM[@QVZoNoYh_:j(riM#f\3[0M_0?bKHk0:;BmWVmRou.$,:A&u*HWB&SiXKiF:JRnc/\9cX7<OBh*BE"$b<%3!8ut2O/aT78=Fp9Ks#3LufM+1>k[EnHV?E:.0O>:\I,`Kk1NTTXk;e1XM2!;[E^_@MbEI>pO&0)T[[/>o,/JrFPEG+DDgqNMh[M%fqccVL:c/okJsi\ci=YkRM7YJ"C;B;oj5crBTf3SS.I9X9p%$e4U#hJL%WQ%/\5W[I%Vm]RY>3+X"O[rasfdYBc^Rce\qp%?`1:4%,k)Qufk)aON'JgkiG^7Hr@QbBj9>*g]KjgjVGjd5R,W+17'u28#FA&YON4O:%r`))Q6\M!b,8q,5]iT_6X6?%`,L=DP:[JheVsoq%Cf@8B0;]W+W\ZI=28S6]7!Uoi4%2!aU^)(_eKt=m#rEDAXU/$oJqs[iJ7D"5I'*uUa<TB8as5gIh?TaUd"FE3V")OT;m_W9O5NOV%,&MQVN@Yu^W<J*q;JF])OFlV+!*R.#A'd"9k8usMi\^pQ?:6u]JA_/hneM?Y*,^CR$hGCG;)AX3"=5>4g`g\mk29_oS3YB0Pc4?W%ZqO4\%\g>=)WjjkA8/_Ok?3<FJ46aIHnu%+0J'>#f:N=t>"BOc^b%ntUpXW;QZ_)($b1Cp)LJ(&`hbASPr;c;GREbdE91fL"&g8;%OT^oE6Gff]+FsUmeFo#!U+"+#E@c.u+KS,=K)CosQj=28OAZ[PO]'rpaeVj-5a&u5!3J[i!Jp6<(^NQ=+I9/mQ;kbbnj&<>a,1]9%SDO#fgJI6/@kUGm'>_4HBdY0:Z2fcfZ=&c,Q9r"b[A7d8NbHn4Hh:oR<#g@Ocp5rt$4F=^8A7@DUljQ4[/c<i73F3Qp4=tDbqT>H%R(P1a4i#G!'YFte.*%V48aK<S8b(i+)/:`1*=>!D:&"#I-IqS8J8;m(L'$>ePAR>2J2[YZi7S3S*.mH>43eb44F:pjoNpGVEsBrs%>7*](ODV"1Y:Zi14UGD^U"5r`p,[tZT&;%kRM6SSCk\1EFS]]'.e".A&@aPe+FoV_.8_d\O).b:LYcQ4l2g5c:.oAE8V-V'PEZ.6%U$u?`8/eC(8n(kWKZ'37\j'_p9"bpZ.;>5=?<"3?q?42ANI"bA+`ht!b)mT]NGCBc#as/rFICT)U]o7-q9GlDBgSWCJo4$>&-7'=%PW<T'1mufnJri"+9p[m=9auH75I:`s%D'Jl9o=P&=X^Bu[>&^d'\Z\T8SoM^peA3eEX%q'F,D&lbU,sV_:k[>';N%DI4PO3)Oe4f%L9eLlPc34aSF4j1dO8tMi:k_Zj@sVbTE#U<H[1`&&QT!pQ_Hm]"\=YoEBHmX]i<2V&hl_r^HB7h:]TU(cu&j1>K2>KE!jorD*qK,%j9;'+(M0qg+Tp$J>o#K'[ikS`s'9D-4%)2jrG#NXa_EE-ECB80D9/8:ffPFtB9_nIUZH1l<:+T\Bg*]9PiRDN7@T&TDk&B)XDJQj%UFa,-Uu\0hn#h&%D6WRT>"XNJNNqh5Z4%9iXb>_TA79.L]Nk)8RMTYN%COP6:BV;D1a^JE8M?EA;"gMROhG_ZSCV0XPVQk!KN!k,%d$nPf(BO@sFa_H9D)noP([QW2Sa%?RPi%NKCb?@KP+VhmPhMo?,Yf)S\m322j"X$UNd93Y7S:53REO(.%Ys'b"btX(=oata8r@!(%8G#H)c)br]NGYp2A&48QD-484`qmJ6(:jW$X\W2":rd,Lo-eF#lXO=6MfFQW-fu3kD.3heoGuQJO(1;d"g49KS.H3Ac.=US$q=rK%klO8QknF7CoJ57!$Z!=*4k-bBArF-QcdAjBB!=HE8HW]M^Pg`AdEI<T[C_gJrtmlP9e'OF?j*YiBMo)A98aloq`($&7d=\K'nL/P%Vc2T[$gW&7=o;3V^BUkcjLFoYH6W^0`aPaNhu1,nZZIXQ`pek:W\.0cbDCRWKL$sL;,igc[[$3">mB+=*Ph-JI8GE)ijj_bfSnBK%UoRa\+]J7Vh13&Z$%1AO]KIS!,;)oKpOs7ZI4BBr]m+tH`;tnjkFsUNgC6#3!D@K@lf7F=]W=\P\MqNs;M?TJ+'Lm%?)j>%aCQBA%kTra>>cW.T[3?o[ABu/FXCccD*+mZG@-cVd9Xd8jjusbqnIFdqL>\U-1U$G/o2r*HYQXW0NG_hU6:dm;M\ZoCMr:q^(0/[ZIGFlT%\WQHo'ROZjI;9</Z['5D<f#"M%n=lE;Vr'jLX-Kd/W(N^O&`Z@4^6CJkU,/q%<bVChmnk)N0Cfkqomdk?79d0l\h%ALq1Vn1)n,:%*Cu3Kk0%kU/`,'FRf9g6@>Z&B@9E.J7`i9KY5%7iU!mLXNG,V"X^SDO%aNhVJgI:).@G0.f"I(ZPfhVm)c70<0]?<kpUCOIFYCjK%-WoQC[?4iIhjo-h+a<tA,]5/A$I_5h'YiX^Bijgb06<KegqX[_Nf.?8)Jq#m^tu!O7^X47=PGU#[W=>\0kfcV7,A"/YsO%p$aITn%=%KD%LX_:D95`i"f$T^R^0;udI+ERJiKkh=SHerdEM4VQo6uf,^dMrH[+,,'`G^2k$r0gBV^/SXh5BIQI#J1uG&cug'Fo;>FC9NU%k3!f;Y*\bkOAoDjjYUd*)YrnABs]AC2FT7b;V00084Vh*2hVH7L!-n7\+QChN&EhM^aRet?0.O,=U=[dBs9ac#H?6ga6?imCS02Z%IF>OD2Q9]4qq^N0O3sr]3FqH!(V72K_bBa6K5^,_;onR(g0NnT%=U6/F'B*S:Y[iEOop]FTfe,8f$[m!IgTfD=PZMp*urNFk`X0d%h(3^DR7@Y=\mKZCUY/r>fE*%7eoM@Nf%^jmf`L$ojc/06%%(f$qOk`"*s;t:)<tJ^M!)pqh!QCR"EE)*ckeVkc09is\bb7#N]oF1%iN'p(-(S#u`0BpVfU'D+mo*l]>9A7m^9%p/F\*uDqV]?$O@pa1R)d&hn:n_9Vu:$NLnl``92?_f!e/_$&K\l)KGWA]+lgu@\<gud%=nd1BS%PPH5$qaPi;7_HV[\q''s$K(6&1jd#iq]W/a;eOLSPAC+O^N4iR3q=&2DU2c^Y@LTfKE64-aEW^FaW4pb3O@4,miq`EmkM%`abmnXHANT96Cg79*g_DlC^M)3d<BWd]>HN`9LWNE$FAK1oCi/Z[l0uSE\$U8faE-2R,L^l@Z$[PA>Mmbnq!i*!R[TiS6eVX's)9%?b?E[ma`WU'PLtQ]=E6_3h:9*cXF8.CT+[aGNsfr"srksDLM!u=!'Pl>J,l2%;I#92\qH*esD7m&M]Th[R,d'lt%+X1FEe.N?qR8%M`4?CgBunCjMNG>'I0Eb)][7+6fPnpkrcBh_R!Zpne3`nfdVRj\I.<3Y!NCtX+T8sU\rq(p`9'h'Z(K<]Hg5q/9,NU[kJ"9KPSh^%CW3?#99i\&*1Vo][GJ@3$JlQ-\B8`,OO'@bG`f$>3m<fu7)&15c[C?</Tt%jXasX&IHmD=QNpD;/.BKlfdhad4%eI;LT;+MlmRPt%1R4p^9O)r'O:bko\OrR5N`$-6eu]!?Q,Dg/&":)=3;#Uaoh$CA1<u3a;ips!oHP+"IBHK3YbMolQV/p2IeIVo+7I9J$6=;S6B!db%acf[2n]"_S]lZlj4*Gu.8P<OiD98@#E`k`d:/Ops*HIC]Mf#:%"/TVl5@112>8Z1%_-`^C%CPu/qMp@gV=8B?<=49p@lm<Aqr)fA%YCH.NDpY.DnqI:f=r0^-ae5ui.?PJPA2'a%8`F9_(I?8V@F4#Q16tV*NIrB@&0W5'@#!^0lLT\D(:4df*a(g@[R`^%L'[Fjpc,N'%?oUT2Kk$c-&]Ciip;pPC!u)'nHh#E=$gun>,:]f"pTDi'$e^bN%#rH8\9ZtomF)QL^]2cr^1IOd>!O*r'X1^SS0u2ToGYY6,\B'T%"5lNXaW&EO7KHJN')+YmmmRdQ%K"T*LVj\aMqBZcc@]iJFti`t_).L:i,'5Qm@NTdIpE3IGn=j#Z;fQ5!JJD"g$$D[(rU_S+9Smo%6m=r-ef<BR,:E'$TJ;-"h1oA<A4/dNJG'Z@Ej'k=>\k#<9^jpA:L8oQTtXJN@M$hL2Y+h(WPMOsH`H;\V[f%Tl)XD*1#P\-4tN@r%c[bPojSh=jb_H)ok1"f$W<c?cC+\&^`rr,pAM(85OK&RKY7G9ab319\j@b%;WHS"M3$e53+ao/0FN>YGKPmsM*NZ>82^"Tg662$5%f1'!=(#C>:E[-CE6J)_]o^gS#GsR8383btGn$of6X),u_5e&o#!Y/FiAZ;+,GcM7.>WdfaN1&0rk=**%7^=;Va&?rt6YPR,_9EGk%US<EILG?S!1<_24.;N<d]eP$d%ENB*;/BBLTt%#GbVSjmb)c;cqbEu=5;YmuLL'mDkuk.Dm=hYqQ+&W-Y[I<F'e9[2Q2)2+<nLX/%DaI,65q'R47bUE4WPqG,ek!JD%qMMW-nn!?3cjWT9bnUT(rXP'1L@M$Tdc(2;H3^)EE!0I)n30eL(HWtN)N:q(,HRT]F5&jC_1/3%qRd(^Fg:9?^4)YWEl"8JQSVO?au;BM6ZC&bp:LqLeR\nHPG_S@ZMV@ofID8t>V)?\kN/qUaD6cTbdtc/_o2WMl((.-*aX3;b$BO5%W(\-lY_F*0X\@k[]LXcPiC:&t8F=OuG9\6[0R@9sDlq>Yn;[G(SaUrqEVA$u>RjS!Ge\>LM/[hcck!H43:^?(>raU$81P+0H"Wf!%-'*sio"YcIRbS_a+0@Nni"Sf.&+Y5t?BZb23@n1lON1826]Ut.*X?cI!WBQO7ktppd%^FI1(_HkD%;;C`Hbmfb+QEL=tP^>F)c^a%al8LjrPn6AeI/^B_E=23_0FhJ"&c'l!?3U?r1l-^APId%h$67a=@"ZrmE%._b]r89g'Hq_H4T.50BOt^U&nim@!\@"V4XqQD`kI@%dGL`1pHB>D@[XLLU/,1)D"Fnp#BSWU&@GUtf4%$7'C:YgL%s]B%J`4ZO8<D6aHGMGj^p7[b[HXU[iWChD-@g8%p2*Z4P0#p;>kLK%coo\$]_g@PCpMR6P++P!1G)'ooA_f+`5I>sT;i\(F@WY',_)=;VJ3^\MkNu(1\YsbpZL?WXsNl@k1%-`@@%\\\f$,LmJg^YL$c*Q%04INmWkj.7YR>@!3Ss6H=23p;Xip@pfg<0CFkK*fUK(`t_M&Vk66jeb0NLWXC4"0>@:;ofd7`1aL94P&-ao4MOSQkog&Tmid(,8H%!\XM=dRE5`B0P=k?4K&]Fs5TIq!Me[Nm\c6OKp+<M]=dqcfCtVe:E`T.cXE'7KQO0dF/s86>Goe.@@WCUZ0MqV"C<9LM](>k-<>j%n'',9qr9SRkj1WRSKNK]q1R<7f'!nj\P@j-nEjGoce.r>P"9XQ::n"-NH!cG)k!QD/d*jEjL"iL/"3/Q)gfugc>_s!6/#R!J]NNo%a%LI)]aWS??*a*@PYGepB+B6L%d)u'WE`)<Msf$:Yek=h8]VOO7r4dC68b;W(B5)-G0S-,<"[!5V!Q;Gm.+<W;VCEV<j?dIX,q\C%J$ubYk5Q5!SM[RN_*N[#7JJsPh@B)2(LJ)qcm<^#I2jFYZ*'G7fl`E,<Q#PrhU\+deClm-O:RHuNMc_BjLCap$:HLW1b)]'ge\^#%Q42@ST!/'fh^P8fb4"!J`V1"c;C!nnQPm[ITs6F'$L7[P=^;UNdSMiVFg,E)K3a)bg4;Uf)'G(0/nT:1*DOrA"']j`Zg%4iO+GZA%J'&p2]ek0m46OG%6mh<`eCZ5-^q@TWRi^]']5,,E0"/_Bf`SHkfK@U0Gom^MA%+I3?5q?5U<U4m_Z'Zc!YXn,W$Q<!YL^^"h_9dD%f$P)if5s8UU9+mUb]UbfQ4aFWX!'K7)?r`8bcZ7dch93S85J3k2$uKYV`MWiJD'%O]N@YOZ<8c2SI+!RBVT0Sd'XoKWZp.'Ybr8G%W@$XnEoaYeBUC\<]4)?ijA$`,aE<KHKDf%-&g)hTJ;U[3E]!5,o&GcHc0Q-V*aW+kJLi%u/Y].No*Mq\eecbqFb%?)(B3Sa#_/Q$%D4'?mgBd!P$)r/B!om(T&)F-+-VrtaKk>E4K2'oT3Z;iI1<gMf]tPYDG@Ek3L[<+MVoOh[m4d!_iG5UPbT^#g:lp9_&=dKX0R'E'%m+-+_&I);<_RUTspd11F]2RWhi@TDK6=BE9$oAT;b/3aF3LIEWi/XRk[O7+AP+u1Mq^unGmu(KAks/Ii3("c2j@nLg/Jl!B$OlM^%Gl\8G%2D(nF)*I#U:/+uEjk*m"`:+2S*TKp]3?n2"K8Z)GOB,5rHT?l!n;oV"%Q4Vr"$'=H3`0A0AWG!nB%4%]TDroGR(cp2jpPo%gtGIjNQ16a"g6u/T>Kc-QS7#j981M7qN4V6V`sS2Mk.8.1S'BBBBF"!`PA#5H%<MM#BFJE@[e.ZfUH-lqqYC:Qof*HCQ?,\0@$]2%;`(0UjnLfN'?:(:jgVQNkH+&fE(=b4m\HE2SZ2'0^L)2HHdXNiYJ)r%p#aSS>":5(j<hCUIX4\&H:^h"Em?3D4;5&3^R>tNX,10n%hU*8m0]r,hUg^ngQ2Xn1ZF#J^OH9iT9#EA9GXLe*DHb;Ch;uRO1YNRqjXa&CD7MV.O@.qqB,uV_>oOaFYZ._JJJCL'4b#9q5q^%9%8_5F/1LbiBs*tJsrN()Yf\<JU(,P"SV8`ND0g+*H_`tm?Q&M;m(Q(nOG?I8@&5'EV@>f'u.E$>q980D_(`A^4n(X46]l8(g^%G4=%CUE3@$9?$E!1LMR[sSE:(4a5$"69H%)bE!SEmWcNr4pZ"hoESfKQ/do]PI)b?If8rE&ikL:Eaem3j$%;rLp(P=dR#alakhnB("30%T"7FXFA\2FQo;BJ>>jZ+aZnJuCLU#EHNLt"p.9Zob8H)4>`6s)#8ol\n@6a$G]&);RjS$EjqkUE%fMHNG%](OfOG>&L+"J7Q-sa$%;,ZGA-M19Hgpj]Sa=)9mQ.I!.Fqu+Pa:A'th!a1uo/:RUM[SA<_I:G]n(=+&SG,)TG;.(rn27J^P6Kf.)ojseCK]*T/FSK9e#VY`%W0&jH+6`'C4/)t$8+^W^RJPe4qfN-(pVe)Z]TEleJj@FQ.k:&%<TD9PM@,Q`]CS(L\l_ibAn,RQ.:#4NpF3VL90?D*q>2X1(G_P[%:u<A?Ip-Saq1Pd]@7#`GohZ#G4`F@EHs1)8aAn'(e>pGsJYNk6kH7F1d9+-MW'gg>"K1cI.Qa"u:W]S#pmRb$I\&%$(5&SS(H<n,%K1mR@-umUMGH'reD37iYY"DYqd*UPLH4'80OsH:u+1M6=?7"STkSP;)ka`4?-j@m/asGf+^*mR7;.e97XM>Yoc.NU4I$qqT8WV?7%9Z.ohop<uI6&kVJOZaP`qcIh+HL3A-SG!f@m_Gn@fRb$$V"ai;71/;gLdN6m`G:bh_6FKYk:h)q`XY@=f@]r0:bT+<Ak??@qI#S?%C14d!19U"%\jH[<F52G$_1*ODp[59Y4fDS>_.?WjP'Ig_=bOip5ci2GCpdT>Q3rD<-&%?nqH\3mp619pC^b&YZ9$6UB%MCBUS*3S%RZF#Mf\IGM@"mTPhD<<l<VLJ<YSFrM)["-_)T`%+E"n^2^!oYV"N:pM=X/npa0gm/JB"<0"n-)#%5[SqU1.AU+@ZO-N/\Q_/nG[8%L/?D13QjZ)d<96j*0%QZDo^tk"'&2kN*2<F.X.8Und<4A,\K8B9&lB-B`?;gfY+U@AD7umN<*PNfpuN-f<MW9]<j'+lVO*?]#JVJ%Xo$[Q)euoKpXZq.]sTP[6AOsZW[PJLT7TYr(H=bWJZ_gP+bA*"[q5,VJdAhZ^<SWO+$>5I$5'qkH%kernMJa@L%;h9;oMqNDa@"h%F6u<L4DV,-"R.lfCKD?"?G'A?B6Dmr-?"8[X^aPBC):r,a+/=dW+-;O*k"akJKp="a=Z8'9ZFrb).dB>=?D9Q#/%h3Ks#BNO&HIY%$&9?X[HN92/=\IoY&IK?5^/hqH`C79`u_oHWEiZ\=#b<S((Te>SSuVNTOgdW%QP0t`NDU(da(_RqjtOjY^[p\=,:Y.=hfDHa@+Sd%/eh#@Ti>5pqc+#EcrkJg0HQQ)(EN6Do[^2Qfs#^&iEC?Em194ic/fbV9gpgLH!7s&Fqu*`iNfqA\\[\)%WE]a$XJVE@4&>;Yr@:p%ms!RS@#hibgs3h/,`'#gKqB$9$R7d9V;.KqP37CTQZa.7]+9oH*6au#Z`/_lm;5)FGEF,6^X:4D6'Yk*JM#Y0MII$&k8%1'7qc21%jul#\E++H<0XtT51f,ia$O(H"/GMKs8q@5J6OL"fakZS'H>tI9:fW#8+<r\=rn*Zl\ZLE.hH],4AO0TDr.?GOqD;knl9,B%4&sd=%T$`TuUb'$8foXr)PSnA`WC@`:-.Ae(1Z3eWOu/VX@AjDe2$%8.C_nf;AY'Y_5;5VA1GJhbC[^5]C_p\l!RXJ,+`lt\C.6/`iK?Ls%g?Uf[;'R;=E^;JV7[U1b'SqrG.][Z&2bfOYHO`>Zd3&\(Qq?qXYahh`r;(^s&6[r8L]#-C7J\Gl;=iO*Q(t-^.J5t3#BOtem36ko%/#JQD5$SHt(EZ7j/]!R6cLIPYk)MKsY4D2,5+!Pt\<iW`I;!j11BX<jJCdp@[I$#P&9ir1"j>J[G,Am63TR(l*?6\7<o&6i[VlBi%8W)O?]MMaer#*.DOdt'Pn3ViICB8g=?,5@?[(ijR(#G\,"ZWap(N\=4\UPrMp*sh@fAZH--*u_iG+ggp^$M=?/g<t[ZKQbH0aDb=%_mFM%&dG"E@Gp!+J"G;HNSN0?K37IAr\!$M3TnBUL:tsI@G<EiH#?78\CBla)FV73BC#\CY&s,R_S2!nS40Q?i-\@E_ns`dndSm'%#T(e.Ke<@&L%lUuJ=eQrd"O)[H`K8!(:latffCWN(FmlIT:lYFE)h>#TaTND'CS?U;!X-H\A/DU\Bo5.@;lC<HE<QTHt/slRVol+%:>A2'3t^So/J+sHD?7LOFd*oUi/eV]E3UFmJ<</9G$0u_cMMM7_O];<>6%.WGfMC@^g&RdN\t#<iSkX@nNVJk2idCI1?Qk%cA;Hl%j;CVj/?HUSX/`Q\#.?G#.=d2q-k4m%0S.%gY<drCF^A4V6!Q)"8(o(o1QCa!H:+C*d\hSpRO5R8?g!>^p>^97g6,uF`N"B[`^3s&%"O&,dbXe<qKI.if)Xe3k-t$KQ'm6VqH#QiXWR+)*l3FV\H_-TKS;r8:Df]Ic%3^T&n"Qg-?QU'c-&g,N[3N?R(5&H^:FG`bidq?W%98n!e1DLqe37]Ys[kqSW("'QLHHqFD'=+7tb775M:,oZOe:TcQ3fobWDs9.On`3UQ3l%"K2fo/a&%(BY1$lL/`)[a/Ip[[#l@git%]g(;@b8S"A#C&5j3&+C!Y@?T'(ZeTZrkeGj_cP0`E.%=f7rpsa0@g)t\_P"qF#h%d>V9PWme+gZHs*aKAR)DA6:T/uF:b0K^sD3;%n\O8oc84LH]**qA@`[(_@m(4.SbUKG!K6+;A$4F"M]XEN%C[e/*frG;[OP.IR*kbCCugLj7GbEKeGbPib]=<Ia*s@7e)5eH(6Y5N%`;XgdF'Hsf^3KWZ>5UF%dj[*_FgfqukaM<OCaMK?V\%]GLH#Jg6obBY;U"=:(i2M(Hh]eReSOaq;UsY+mlQo9"YHkX@WJ_F%=u?3%.WQ!gS7hN@%';Wd2:tnOB&RGT=gRlJMSR?p/ncu\M"6)pTh[J`iO1(nJDqMmRAbGD=YQZuq)k0%plm?el_1X:ck3K6%P^2`QeOV>%@,ZsTmtYB]N@c,Z%@Y#d//aa7nASD(T8tK*4$5lUjD/1mTj)?=StaI^ksViW&*?ho4pM;b5f1S'U=rE_H[S8+^YYh\oi%?RCT=q,%EJ0X8r!]'-1c-go%a*aS%QaLt^UkgKhQD[<cgE8gg?!7L[>/m@]c2+E*S,0GVXCVT#*X1fe[%>mSa//N%c<&6qAF[1g]e8#]?iFb%36Z9$41<rup\e/$]U0pNLo/Ee-"-4+ZVqgI/r:T0ma]C,fe,dA$FZ\"Y1=XUF0ETAh5g'^l(7e*oCI5D3Oe#fZ+NpI$ApdRUe[LM%6VS[-&`4.C?ul884H"q>ioVWFi*;oub^IVHHKDg4b@uCgc4;_+7=Lah$NM`8GLJ)]>`[Tk4/pH.$jDGkr&oLtH]5^KZWN;8dk$sa%P$M!`6V4[@b!jl3.8i*[]c;22oKo$4=_@&@r(tiqbi+W?L$nIu;83s\E/Ur2H0b1G.V8AN]B9^[^MKsZT'A$%]#3?3/BIEkST`XG%J+.r#j*7$i*IN@n#4D:KOB\\&X[&&iegBPI9QWOG[TeJ0T^J53BE@C^F3JLd)s+f]2Dj9,n]R5&fMKMTfZc!aaD=lGRH51c=mFNp%kq:*+3.U$'#BQ]#N^LVf?=50mD]TsM.C?#%V6Qsm/cM_c1j_1c9cQqPqI5I`/8b3;=THA';Z4?r:2ZcC/@Q087:n[Mgd94WY+V7g%f\//(a3?2@[j\jTrG]l4X_%+r=DhPW^I3,I0t6Y'=DjhMp>fYgWSU;"OR!hU_lS2>[lk0:XUeBHYbi+Qs(Nm:=+*p!RKEoq.uf$C%<P-qscM#V$m5'kj[i9DCKDq.X69sKN"e[UkAk9LO]=EWt23TS0DP=rX007HDXKX+0&a],EZI84_0=oNl75SrM"CL^D1sJs.c/pcu%Ql,(4&VBVDk>.*!^._5O8BC/C?5Wej+7/J@j<ge`Ek^suhOf"Qpu+Y[VuEfAao>5idso\1%nt9?76W_r7kj$DM3G;$U.%^Of*s'*%/eRj`O;(MW!!TKdQMEdD<TOXMW@nHFK'NVtRM5RMpS"!"@VMN;WmT/n9*CQMqQV#V'J8I*1Q;M$i/!q;lrj2#OIlb#,UUDqVF<-p%e4^.#!8%4.UG'm$&Z[/?U!TR+>1[6ZEL$qs<F#a_m1A7f#)&P;&eb<2n46MpMV9-iQ=L+bKb(KqIZHotiqrtTqZTO(?\:RGCme4`%GCr=C:sS2u'O_-C1CAdJ!@kq00_INY#l\9T[QN`c(m'PCEZ?*cA6+dX])r"`GRClT^KUr48IbV>(h0d:#&!jj(+c_q9Fb:O0kYYX%dJ,6ogUS5V_!R;6_1!QrQZ[_!X4UQ3r25=UoY-[LW:)G=o^tBd?K:0]kMbrk+WgLtmi-*Cp@Z[TgNp\N/Hl.tJZ1GBT44*n5f;G:%p=W9aR*ZQq#)'C5!btTt:L:S._?(`m%nq>(@1jCl$8o'o$"O0D"TUdpTD(aET@m;NUabq"1uL`4SUiu.bQI:7a:hPn*Hjr#b3-g!%niDqKNj/?%"&%5B/6(l*egl\NZNqUSZ6V/?DoCNW+;@@UJoO>=HQtlE#0$A,9'LSZF^-p>XZblTM>U/^DdA<-8>Sf_-$U+c[kTaX%;tt3cC>FcmD%ri!Xq]Y-AWL!N^nO\*Q%ubhJ-BF\'`V<k!K?U9(,FDFr5tBdo0\(*a?s5N2%=6Ar5*ZN.9L%s#.lLo!XnjJ,/'NN%@^ML9-"[VkKH4W[LqOU)jX*<$,[NF_K`NKM$X_3k4uSWjUa^YBOcWD8_.qjqQ*\#;i-ng+WMkag?!/gn76StY;2hcTW>59e6.+YC%^e]Dm%]d+b;6^I(luiYn)5u1F`aZae?^_QRMZipZh3@/I<Y3$SW(=aUf(q7I@[rR),.u5n#dmq\ABJ7okuagm*_XADGSR%c`u1e4%R2k:G<OY!rm'rsJJmZjf5a[SR),55Z95r3((!hC`noZ+Y!W9("6cK%?,g0S,TW!S&LJ(R(XD*r-IV0[]U72cQ]MOY")`(>9Q?C2F%fCmUc_%rY'lB<Z[I^*8uM`HqW=F1I!TD2ktF1G<7YeV"-N:Bhp9Y#!O@N%6k3g;B@N4grbQdNTMZrX;M."o/LM=Xm+JZN'JRaTI6%d+fQSV8b&7Y:uErNZeN$@!/b9'SR#79V$kb"?B%U-l/h)'ZF\7AEB/R&3!)oB4G$Gp<*X:R'740iG1?+_Z-n?Y1)[QYitCj'oU-N%0LRN<iW@dG&2d\>oB]5gGjD7TL!+Bfep^O(7IE:=jrkh$4\[(dl>LIl3ipWi6L+P^`0&8U`?e2[0_+41$s:5Yh8ADhW]@P+Q="O1%BZ15E'iusE/I[hohQG$t2$.)>0q5d0D\0?p80."GD;-``L3EQmg-W%N@q@qKMU`.iYuCeQ.0A>9.Kt""N^V%+V\l_G!3<V/?r\,+%bOf7E:.UY/<9<.EXIg8+*j[dj[EQ'KfSma\p<YVBE<De&leSBA+tRB-Alm+&,6@tr.m&fkqCN&3J@^S&]]SF>-WMJY?n>NG:/!G&%"**-oeM/8@\>LbmG!?S(AQc.m@mr8kNmR9)_'Wma_:n,[P:FX]7MbWr)%(CLa>Bf;OKA:;.fFHC[f'emW0/DlW&tsQd]/@[EeO+P%fc0XrR,bJ'9pm(/F_6g@E&<->KPf<OktqUB)2PVKM8+*RWe_>kgR:hO;=r:e`u'uXEDT:?#iihm2HF'Fa=!IZ0qRK7qA_Ou-q[<`%mnb3)WXc1:KU!fP'(A5f9#UR8IBo/jfIU;c>Qn*sV,3h^BhZj^9<kM6&aE\H4MEd7A*gH8/051pZ7RHA.7PSG'KV\I>cBg&_RT,q%UN6p"!NF0i[!g!q!$ieM7)Ub`CK%KL=6'c,L.)8HhdXNcAl'FJc(%L5=o/JE@edZfl@)!c."kTo'8//$jlMl>7@aX.j]p_E<E+eB%5Ti?c=/A-/EO/ccn(_F:T;RR1aH8ni-?dm+`1,ZF#(^/Ep)(FiF.JcB<hQ$mA)Fau's30JR;A>Tj:Jc59\N=?K`GQ'#pOpO';Zh`%2NNg\PJn/;%WKUCY7ES>"/-b96D>k:RY>-*RA3EhITaG6.MnMDUa\KH*J!c2?*!-fN'Ion*8&/Q\2f6G$<LjV.Bl[4eb';U:Bbmj%^/.&qh`Xu)Md6*f*`A"\`^h:k23K(br_(a9(Omg<`*<Y,1bKM#Uf/R/(40ubhH)JYo3SS..H+W=eH$c6_18a04%Ec/n;DC*U)Ga)%L4[A':8k7Q2PAr;Q.5_^MB*G!,>k1eFn04ZfU"1O(j2hH>E^qbi:'57^Ousn5R-Mf?s;Vd!s+V=(.K[j+D`NE&c<6?!a-u$bS5/,%W]=U"Bh_9O66Rg0_LTm&_@W2=$\.GcgLu9V!-emO[rpHfDAF.OD<>f(`C#U8jU]B[GPoWq?r0-J&E?2)ah:[3=J;Z+@8Fn[2F-lQ%f>iT..L*Ck(9JhGpY:rtGkUg9J3Y5br&oY.;#1]7+#]^&'?spNY(h85>0T<%1p#^DAVb(J/aaG]ObIJXOm@qE,6ORp(hb%jMV]B[%IBcYH#Dgn>#<dbq<V^Mai(sYc<"`i)7<3I*G``3HFS[Jr.%_@mMR.(qhCt*t[@\=7A@VR8\/8=5<D-RBn"IG=20lX'MYk%0qQO#K%+j7YMe\8<nFXEG_LcT:h#$'NLnt2TJEMUQkW"S/=>LosX.e+['!T>c>PYTc.6IF?/lDkSU-HN00Gpb:s'O%jmPXl:>K*1C.a>[t'%i/H,'oaXS;VN$#oHX!)dh:uWt&W;6K:2GMC9"V,.PH+S,f-!4sn._X;R@9XI95!9t:NdF1K*"d_%gRX7XB$Ps$==kc9^EGq+WqKc%N=kDkpfhFBXQ&JO>1"%,Zu]:>AMsd+6V^YMF\!MG\q;=%RH?alM\HbWbI=0bQ`'F:V[+r<5->-s7.X/bJa8)r\fq0M,\Q[R8>0`:%2K!I=2W^ghA&&g0@0/<hToJSiniE^H\e,GX>">ffpbX4/J39[c*K5ck"1BK&>/#V(($j#%51t*e=KfnB?o'ieY_i+;q"er+1Qgi1%hGgru81A*iH`MV(p-K4!R4?$>`\`\bb>UsNm$*8I_pEP1.IlQ>f&X*?`oU"u0uq^+%5V$-+pYdf&+Z+*GtOqmN6T)HG>4rNDkA-7%/EWM,VRG%^k?9`LV[gaZ#Zjqi?])WToEKTCUBPH+^+l3hWIS+]2Kkm_%J4E6'o%JrrJ1nHeFC/T?J*i0f\`8@$D<M)0@nCaFL4h.%YA4[B=D@."*%aKq>HQcto$;0i5LRK9gO;<i&anH?.BpHnqmWbI`hO:KWnt1-5;2/ch6cNeTZ9h*3ngjtQX`ubR,;:enVX[-]hoUO%]d9*(#!@O-4Wp%+R1,[b*.o4EJSVrfiWZJkGd4-M+gTH4UbYmd6\3VI9-n$a_h?N)F/iY6BS`S&$l[bEqq4CL3\4uE;hZT05R,!1%?2#-;+<E9^Ht[<4TAM16[qW/og1UgdI;ruZ7(IIN<baG6LMS-X1.ni.%BD\,DC0Z<JME*"LcW5dY(bp25\MaumgR*LG_,:/Xf21b%'0BY]Z5Eh33YlSoCC]B6]E]=j%RUE.Q.H'XbmRscc'SGo`-c_\HtFeK0p,J;OgdW)I^<"WC]8pGXp)T&Y=VN'QBTBNqjo^P%V(](%KQHV>Wbs;o:7gsSL7Aj]W7dpI!WlktCeN=Z`uP^\W,>hdf8#,p,j$ds;1O8'#S9=,>o4;i1(<73Ct76KntsBY*I!:C1@dQ)iEm`#%[Yr6iV(BB8poTpJa9%%fEk]$lUR7NLnQH<_@Ksih`8\I0:?=kcgGFXp8Q\Jd]XOU3!a,TKkJr;#8>7lOl\U+ATjVn?hb.'(K2l:8%(jc/k>,.hOghdQN;kQa(ZlNBf<kb:W2l!0gjj:=s5_?R736XcNmb'#"7?n".mR+Y$2tH3GDqO*.?ta5uAfj?c6HSRH>A@5:?j=c[%VR;l&+q^B713<TOH=N6<F0m,8PM_27K.a/d=L9DE(l?u=<f:'/=R)Y).0&)(Q2&?u8=HAkY<iD69'rM7e0[J/No2*&0\.Gkm\J6s%>*tX#Q#>`Y(?T%YG1X`._2utRq*1JZGbDD8@*acEIUL(kKc?f!Oe+fpqk?-VhAGBolL6/cRXM)pZL[jR0p1JI>R[XshMQBM9<)k>%LA9F`)E6k$"dQ0mr?#F'd$!Y7@m'd]7I/R0aP4%gWR6_j.tm)In*pY"7M=nZo3R*gj=O-2Y0E+_7dVX,Cda(k6'^AHL+o_OC[g9V%c%6up7UA(iZuE9u([g7-%EQ<W/+Z!"em8a>_mBjNo]oGPLABq[K?c,Whi,Q-VY`WjG;rXc#2C3e%<CLBO%(SW^=b-)T,p?Y6J@1_%Uq_KIQ`k<sqrKob3umAeglq^A3odo7Fp(:]=3]=tooklH'^b)'kBq2>*]O@IZG9V*QEJg-qi:UNE#;+uW]n-h:+i?%,^j#_g,<CL%!$or2p:;*lM[b;lV&Z+h^5)^9b%a+N>1$+%g;m])$5uT%Nl*bP%PeM]Z@lFc_7i)q,jPf'8u@TeVJ<bN6QfRYLbj+i*acg23AtqJ%eC(urP<A3bS6J8/nT*6K"s<HH,=7!jWqB>0E_>8g1HKCm5k'hH''U/`!,HPp1AEU`$b[/'mZq"YB)V:&;$aQ\`3LPpOYp*)'97]m%nRi4%]2,,*99T6p'ZS'k"W--I;GtRP,JBiAHel'sQeQZcCJ6T\*b\Zrj6YJ#[U$"Nb/W5RZU5uUUg^XjbbAC>K:LC.0jbqjo:cs0%NjI,k:!5jpG1[5i#djGY+PV"E@LX&q-9deEDA_ldF;WV/Th,ue9P2k@5#IRYi`=6LC=.*DhS[OE9$PY!)teuUJKZ48$UQW8p!+MZ%K[6sfXnV-<s/CV8lpSpR:gX%#`#a'2Q,lmISh2ErmY%m]JnNh#JEkbs;`PMeJ'T6J.?ToY`?pfgq..bCRUa+blXImpTK<)=+8*F<%D;Ou:]ND!l(o^Rs,a_+MMiI[7n]+Xcns=m6DAI=4Q6&le<m>JqMR!\`">SSW2hDD6a<YN\LC5+jkCnaM^V<H>nJFcB6gKNGW0/aE%6&e0U10W7eoIc(;eH,2b">DmUMt;@@$ANr6H%AiE?,2Hq`CFa%_Eo4H"16a1[$<)`IR"E)@lRAL(#X>`5<78#C[hW7^W_C_.&[Z>%X_eA;MMGJ=i6K/pn<:i_Pn/8;r8)/Ad<bsWbL0#3#S\fCZqA[N#uPbJG/Ic?Ne2o:Z<'=9XPi!-#TIu:I5l&"Ji)#nRk\\9NH_BA%.MDs&.8AbT3<.ZaIAjnDm![6gRu=tS=U(_$]*S1>.N>H=J2A;_[A-HZp$l9cQ[%*!B'G6P>9L9j"%a*Y/2Wo.iJ"W/id>,bH,>]L%,]FJi*&Q:`1YYU3$"+d*eh3gGcG9oXS\6cB]%d<nCe:.]#XATK$_NE\=a$4BA?^72leWUncXS&99.cAgR'p*J9Z^5!AMnmjfj,s$%U85r:!tfh2)70Dq2RDGiodX0-p.d\OVCtM2PYF]JYr*t*o[g(%GM+#<hP4mp/dFY)OW6nkr-7#JG'&dPlVZG9rC!&dbEtW%9F8i/%?R%uI.@%f'bJMQEd?JZ01PP<R9YJII((#b,2@RSAZQanBk4(sS'0?pWKQ*qHKkT+j#a'rNedWl=+f/cKNkmm-3n8\a=i4X;&>M/:%q6d982O1J^%KNHF&7tZF8d'Tu#h'r28Qk><(V=QR>t@\@n6K3BIUq7a-n86L@UQ:olu2BBJs37&l]8"SlA<m*Pk&bWrq3bf3iT2C%7mB_Ppj#tN(\,j7C7\+:kDNUm=HeSb"P&=a!K:tbX$4]\Hf6A&!JdY\<0UY].RAjtVfg-_U8g)1;>h86TI=BQMIJ4P)DF$$e(ioS%m$,Yh$tTZ#k%W#^dX$cXg+@V&[()e.-%J#8I%578O%>=QNXAIFqS$D)Zk84f;YN?L_Y3FBhQ,2eMCRC\4W^!M7\KpY207RlMcsFN%[\r%D-+b$NWpXoMKrKG>$>?Yp2]VNiAlhui!T!.TV%9i'Ma;pZCA=CSO9+s[J:HE12kU_aMd*WojYBqA!*.%N"c9JW(]"RgF'O@Y%&X<NQ@3):t$'U#IXAlAjBM%;6Q2XoGVV0ff=rPOQ<$[qaDF6)Np[3pM#r6e4#rCrclqj#elZ?dM*N_6g([Hatp,'`;4MWWu!&TQT%DQR7dN9Q'^B]tfYBWV`dKTBL^[kt05pVH\a(?(H]%crN^(%pOrOF[b@TYiJ<@oQ1L#UdETpSU8K1T)sCpH0#<AGc4J?q[]'Hn$RY%V5[i5gQg5V`7UUnT@5acjY>dZ&'S,[O<b?MPY-j[lqtd*F*"#*H4lE>N<'f*Drs0ZV7TPJ3&s/i4k^D^IoB/2TQ1;.'DG0GQRR9U%"m#_?9l;bqa\FIOK%7XUW`g0R7E)<'p2%gL=^k3.F7B7M2Y7jBnA8durF5O_]9uOa++"*C-8UJHQ,h0YB8tU5U!35KE.\s^TpJ->%+)<]K?NM<$[7P&[$Fg)EAH-qs&n;)ZQjeFq>_<$6&KOTW.2_WClD<9o+i^;RY?it7@dS]5%k^Bk&7n:IiKS#P')mS8\=Z,[q^)DW%K_K9QOB^4+P1"n%6Ab'e0K&6boXA`i_cAbAVa1NI:)e?U0&V%QUPh.d%d)g=!)$"N%n6.aE=)$u?[).55uoe":GO=i%0jM[iN+lN%_%pGHi][IU*ZqthOC"a?i[3AcW)f%>MVBVg]ENNFNPbZgoMc9+b84qp[JPseZZXddBZ-#[01Q^M`H'4G23bFJ-p.6=h24SU8r<d-%2aed![OjA++N83"l;/Z*[U&Gei]P+,:TP^H8!XFlBOBP#0$E:c@5YHc`)-iU?N>F4A5J>kk`+0Q@*E,r5`q8TG%nhWU<KhmOj9iM%m-K^?$>#\9K)31FPGXZ"@E(KqjriOs[[37Yr,]qQ:QcY4.7Cq=Q<82>WB8StY-M8h^,q1sVj.>$8'6'ea=!mh4;*;=79P<#PZ%)K%E0p(sA'2<FT_Md6m>7MXOA1]OkWbQQPX6*hPn`Ik<!khB8#(t6O%dMf)D_4D`kXJNo[@cYej'-nY<U++jHJYsdabDDh970B)1Hfp%g%ij%!?kJ-@[MK/<DUTNVAs*T*(?iC$C@-m8rQ#.m^faB['%R\iCCqX]eH8=a\FL%%L>8B2Z;F?SYB[K31NqDR(^D_lj\$BLG'RR%bjXmqG`05\c/-YJO4bI"EjP5_e_M4(1MQ\$=^]n*J!.4a!X?E3$)4])k<t!f3K!FX=d*9BR+[)Q^4Bt'XI[rHoWXl*9nJGDf^fm"%p/pgr!N9uep_Ah2-cIg*<Xi(2=<^p>o9Z4K:f95:0mb4KqnmSpW89NTps\<e@JS$o;NQE2LegreT0oWscEE96`]aDgNmB/D#fpW5%8lcci%UE)qPsK%]76kZcA3NWKZG03oG<j$IN;ZVtmCdFh`GB8%Xi.o6,?UH^'2l(nlj9eEGBPVh45@Nl#5?5g<2j1l*NGE5Xf'\0%!E).a!k>J&iWq2+bIWnjoD=G$bu0^8'k"<tO>>O5:pSahMKY;3op@DT8)uIj!a*>QK$2\Rn>GA*)M0')l1PtnWQmC@*1<X7&_/gL%^[o:f**2mVU98bX%HD&BGbXJmR2H$aS6[T&=:hD\eab(eh@*g%N,cRbP)"0+<;si.?b]kHd%+c^g\rpE7r5SE$IP.nR#9uH.7'Ie%l;f`cn"ZG+:FE@&Z[o"m$UufNYKpQ1P=?*rS`KUCTQTD(c(DS2QN4]DnTqV_XN.IPEf*g=X/T2FR9P0+[@m4[(2^bPoKfl6UTe9c%N`28Lo"GYV9.WrUn(+e*c0-V7GF?g./-S=3Nl,n3VRQk$"]jK4/?PeR3MU4Fkc3bUVNhMpb?W+X@%(i%!`H#BITBYd7^7q;A*Yro%E:9<j.7_T)%C_b)n(uXhFik::mctRPBDoUUB'bPm/"9erIOAqJ)F=lodu1B;^57thY8@=-#:D,r,fe0ga@tJMA%rR>=HViR5u_S&%2D"bL8d!psI#LEX1+f.-3j`d;9&Q9r7")=-)$A^i&;h;*Tppd>D)5)%a`7IoF_Lf<IQ/l/M*>nBSom,,AZa[lkkPj*15loHPiLQ9%U.KV'2*g:1NhdBn,#7LMoHeA+N84=-if1m8/ZU+b<*#C/_jI<a>>tif#aMXcJOV4V9QW33djM1i:C(]2"N2Qr'RRukAh\QI7:ETX%US*9-'us@XC!,FFYg26V.QGDg"5Mmthe>a<7nA!7jtcDYUCi*Sh-jpr@sC6'RfUl`!OcA>Z:VAo@D*t`@LU&447Zt-jJ7t8?oX?_%oSB\V2;Gr1*Z/I^41Og`6g7?c"3-LrP\99Cc%u`48(fpQ1BTl-DX@+JScF/ms/KCFMQa0T^*c\`a%Os;7nf<#S.9_fW1#DY<K'QI%#Yl,`mqU*B)09/T<B4ccC`,0)H87:oNnI.P3_2tho84$/::kgSA&#ukb:\KGUrrdI\K#uNku8qX`SufmIt99WJg1F:1WD!=q)USn%$A[0J9#5r13O2/K:kMT0ptVM4ic.M9!hm_r[1rcZm,G9^>=3dJ(h9lk\a,1GCmnTqQ8>%6'gNTu-]_lqju5/o@*D<lagT:cV?-J*%bp%6Rgi`>(c1:(DAb1P4"iR]#`'*GK*.".JTp0b62;;1jgFoioo0"WIR5pmP"$V>Za+m5uY-`WKID2=fZZ+g%;YU2ts6eoCs7S\.%s7Xcgq<tNEs5+oJqknr?psYl7oC%2.j1kNZp]('(rqP6gTE"of^]*c`pV6XfYQ+1j^\mW:f>%7YoABQBqnN(%Dh%][qu?HWrro]W%Z60+qTDnXNrJ-I6%m:ei<<~>%AI9_PrivateDataEnd